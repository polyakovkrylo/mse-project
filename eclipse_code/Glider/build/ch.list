
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001a0 <Reset_Handler>:
 80001a0:	b672      	cpsid	i
 80001a2:	4834      	ldr	r0, [pc, #208]	; (8000274 <endfiniloop+0x4>)
 80001a4:	f380 8809 	msr	PSP, r0
 80001a8:	f240 0000 	movw	r0, #0
 80001ac:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001b0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001b4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001b8:	6008      	str	r0, [r1, #0]
 80001ba:	f3bf 8f4f 	dsb	sy
 80001be:	f3bf 8f6f 	isb	sy
 80001c2:	f240 0000 	movw	r0, #0
 80001c6:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001ca:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001ce:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d2:	6008      	str	r0, [r1, #0]
 80001d4:	f3bf 8f4f 	dsb	sy
 80001d8:	f3bf 8f6f 	isb	sy
 80001dc:	f04f 0000 	mov.w	r0, #0
 80001e0:	eee1 0a10 	vmsr	fpscr, r0
 80001e4:	f64e 713c 	movw	r1, #61244	; 0xef3c
 80001e8:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001ec:	6008      	str	r0, [r1, #0]
 80001ee:	2006      	movs	r0, #6
 80001f0:	f380 8814 	msr	CONTROL, r0
 80001f4:	f3bf 8f6f 	isb	sy
 80001f8:	f000 ff92 	bl	8001120 <__core_init>
 80001fc:	f001 fd68 	bl	8001cd0 <__early_init>
 8000200:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 8000204:	491c      	ldr	r1, [pc, #112]	; (8000278 <endfiniloop+0x8>)
 8000206:	4a1d      	ldr	r2, [pc, #116]	; (800027c <endfiniloop+0xc>)

08000208 <msloop>:
 8000208:	4291      	cmp	r1, r2
 800020a:	bf3c      	itt	cc
 800020c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000210:	e7fa      	bcc.n	8000208 <msloop>
 8000212:	491b      	ldr	r1, [pc, #108]	; (8000280 <endfiniloop+0x10>)
 8000214:	4a17      	ldr	r2, [pc, #92]	; (8000274 <endfiniloop+0x4>)

08000216 <psloop>:
 8000216:	4291      	cmp	r1, r2
 8000218:	bf3c      	itt	cc
 800021a:	f841 0b04 	strcc.w	r0, [r1], #4
 800021e:	e7fa      	bcc.n	8000216 <psloop>
 8000220:	4918      	ldr	r1, [pc, #96]	; (8000284 <endfiniloop+0x14>)
 8000222:	4a19      	ldr	r2, [pc, #100]	; (8000288 <endfiniloop+0x18>)
 8000224:	4b19      	ldr	r3, [pc, #100]	; (800028c <endfiniloop+0x1c>)

08000226 <dloop>:
 8000226:	429a      	cmp	r2, r3
 8000228:	bf3e      	ittt	cc
 800022a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800022e:	f842 0b04 	strcc.w	r0, [r2], #4
 8000232:	e7f8      	bcc.n	8000226 <dloop>
 8000234:	2000      	movs	r0, #0
 8000236:	4916      	ldr	r1, [pc, #88]	; (8000290 <endfiniloop+0x20>)
 8000238:	4a16      	ldr	r2, [pc, #88]	; (8000294 <endfiniloop+0x24>)

0800023a <bloop>:
 800023a:	4291      	cmp	r1, r2
 800023c:	bf3c      	itt	cc
 800023e:	f841 0b04 	strcc.w	r0, [r1], #4
 8000242:	e7fa      	bcc.n	800023a <bloop>
 8000244:	f000 ff24 	bl	8001090 <__init_ram_areas>
 8000248:	f000 ff62 	bl	8001110 <__late_init>
 800024c:	4c12      	ldr	r4, [pc, #72]	; (8000298 <endfiniloop+0x28>)
 800024e:	4d13      	ldr	r5, [pc, #76]	; (800029c <endfiniloop+0x2c>)

08000250 <initloop>:
 8000250:	42ac      	cmp	r4, r5
 8000252:	da03      	bge.n	800025c <endinitloop>
 8000254:	f854 1b04 	ldr.w	r1, [r4], #4
 8000258:	4788      	blx	r1
 800025a:	e7f9      	b.n	8000250 <initloop>

0800025c <endinitloop>:
 800025c:	f001 fe60 	bl	8001f20 <main>
 8000260:	4c0f      	ldr	r4, [pc, #60]	; (80002a0 <endfiniloop+0x30>)
 8000262:	4d10      	ldr	r5, [pc, #64]	; (80002a4 <endfiniloop+0x34>)

08000264 <finiloop>:
 8000264:	42ac      	cmp	r4, r5
 8000266:	da03      	bge.n	8000270 <endfiniloop>
 8000268:	f854 1b04 	ldr.w	r1, [r4], #4
 800026c:	4788      	blx	r1
 800026e:	e7f9      	b.n	8000264 <finiloop>

08000270 <endfiniloop>:
 8000270:	f000 bf46 	b.w	8001100 <__default_exit>
 8000274:	20000800 	.word	0x20000800
 8000278:	20000000 	.word	0x20000000
 800027c:	20000400 	.word	0x20000400
 8000280:	20000400 	.word	0x20000400
 8000284:	08002dd0 	.word	0x08002dd0
 8000288:	20000800 	.word	0x20000800
 800028c:	20000848 	.word	0x20000848
 8000290:	20000848 	.word	0x20000848
 8000294:	20000e3c 	.word	0x20000e3c
 8000298:	080001a0 	.word	0x080001a0
 800029c:	080001a0 	.word	0x080001a0
 80002a0:	080001a0 	.word	0x080001a0
 80002a4:	080001a0 	.word	0x080001a0
	...

080002b0 <_port_switch>:
 80002b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b4:	ed2d 8a10 	vpush	{s16-s31}
 80002b8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002bc:	68c3      	ldr	r3, [r0, #12]
 80002be:	469d      	mov	sp, r3
 80002c0:	ecbd 8a10 	vpop	{s16-s31}
 80002c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002c8 <_port_thread_start>:
 80002c8:	2300      	movs	r3, #0
 80002ca:	f383 8811 	msr	BASEPRI, r3
 80002ce:	4628      	mov	r0, r5
 80002d0:	47a0      	blx	r4
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 feac 	bl	8001030 <chThdExit>

080002d8 <_port_switch_from_isr>:
 80002d8:	f000 fc82 	bl	8000be0 <chSchDoReschedule>

080002dc <_port_exit_from_isr>:
 80002dc:	df00      	svc	0
 80002de:	e7fe      	b.n	80002de <_port_exit_from_isr+0x2>

080002e0 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 80002e0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80002e4:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 80002e6:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 80002ea:	4906      	ldr	r1, [pc, #24]	; (8000304 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80002ec:	6812      	ldr	r2, [r2, #0]
 80002ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 80002f2:	b510      	push	{r4, lr}
 80002f4:	4604      	mov	r4, r0
 80002f6:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80002f8:	b10a      	cbz	r2, 80002fe <set_address+0x1e>
 80002fa:	2101      	movs	r1, #1
 80002fc:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 80002fe:	2303      	movs	r3, #3
 8000300:	7023      	strb	r3, [r4, #0]
 8000302:	bd10      	pop	{r4, pc}
 8000304:	40005c00 	.word	0x40005c00
	...

08000310 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <SVC_Handler+0x1c>)
 8000312:	6853      	ldr	r3, [r2, #4]
 8000314:	f023 0301 	bic.w	r3, r3, #1
 8000318:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800031a:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800031e:	3368      	adds	r3, #104	; 0x68
 8000320:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000324:	2300      	movs	r3, #0
 8000326:	f383 8811 	msr	BASEPRI, r3
 800032a:	4770      	bx	lr
 800032c:	e000ef30 	.word	0xe000ef30

08000330 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000330:	b410      	push	{r4}
 8000332:	2320      	movs	r3, #32
 8000334:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000338:	4c09      	ldr	r4, [pc, #36]	; (8000360 <chCoreAlloc+0x30>)
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <chCoreAlloc+0x34>)
 800033c:	6822      	ldr	r2, [r4, #0]
 800033e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000340:	1dc3      	adds	r3, r0, #7
 8000342:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000346:	1a89      	subs	r1, r1, r2
 8000348:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800034a:	bf9d      	ittte	ls
 800034c:	189b      	addls	r3, r3, r2
 800034e:	6023      	strls	r3, [r4, #0]

  return p;
 8000350:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000352:	2000      	movhi	r0, #0
 8000354:	2300      	movs	r3, #0
 8000356:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800035a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	20000ad8 	.word	0x20000ad8
 8000364:	20000ad4 	.word	0x20000ad4
	...

08000370 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000370:	b410      	push	{r4}
 8000372:	2320      	movs	r3, #32
 8000374:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000378:	7f03      	ldrb	r3, [r0, #28]
 800037a:	2b07      	cmp	r3, #7
 800037c:	d80e      	bhi.n	800039c <wakeup+0x2c>
 800037e:	e8df f003 	tbb	[pc, r3]
 8000382:	0d27      	.short	0x0d27
 8000384:	0408230d 	.word	0x0408230d
 8000388:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800038a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800038c:	6893      	ldr	r3, [r2, #8]
 800038e:	3301      	adds	r3, #1
 8000390:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000392:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000396:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000398:	6802      	ldr	r2, [r0, #0]
 800039a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800039c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80003a0:	2200      	movs	r2, #0
 80003a2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80003a6:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80003a8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80003aa:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	428a      	cmp	r2, r1
 80003b0:	d2fb      	bcs.n	80003aa <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80003b2:	685a      	ldr	r2, [r3, #4]
 80003b4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80003b6:	6003      	str	r3, [r0, #0]
 80003b8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80003ba:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80003bc:	6058      	str	r0, [r3, #4]
 80003be:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003c6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80003c8:	6a03      	ldr	r3, [r0, #32]
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	e7e5      	b.n	800039c <wakeup+0x2c>
 80003d0:	2300      	movs	r3, #0
 80003d2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	20000c30 	.word	0x20000c30

080003e0 <_idle_thread.lto_priv.54>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80003e0:	e7fe      	b.n	80003e0 <_idle_thread.lto_priv.54>
 80003e2:	bf00      	nop
	...

080003f0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 80003f0:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 80003f4:	2a06      	cmp	r2, #6
 80003f6:	d80c      	bhi.n	8000412 <_usb_ep0out+0x22>
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80003f8:	b538      	push	{r3, r4, r5, lr}
 80003fa:	2301      	movs	r3, #1
 80003fc:	4093      	lsls	r3, r2
 80003fe:	f013 0f67 	tst.w	r3, #103	; 0x67
 8000402:	4604      	mov	r4, r0
 8000404:	d112      	bne.n	800042c <_usb_ep0out+0x3c>
 8000406:	f013 0508 	ands.w	r5, r3, #8
 800040a:	d103      	bne.n	8000414 <_usb_ep0out+0x24>
 800040c:	06db      	lsls	r3, r3, #27
 800040e:	d42f      	bmi.n	8000470 <_usb_ep0out+0x80>
 8000410:	bd38      	pop	{r3, r4, r5, pc}
 8000412:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8000414:	68c3      	ldr	r3, [r0, #12]
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f8      	bne.n	8000410 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800041e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000420:	b103      	cbz	r3, 8000424 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8000422:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000424:	2300      	movs	r3, #0
 8000426:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800042a:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800042c:	491a      	ldr	r1, [pc, #104]	; (8000498 <_usb_ep0out+0xa8>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800042e:	6842      	ldr	r2, [r0, #4]
 8000430:	680b      	ldr	r3, [r1, #0]
 8000432:	6812      	ldr	r2, [r2, #0]
 8000434:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800043c:	f083 0310 	eor.w	r3, r3, #16
 8000440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000448:	600b      	str	r3, [r1, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800044a:	680b      	ldr	r3, [r1, #0]
 800044c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000454:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800045c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000460:	600b      	str	r3, [r1, #0]
 8000462:	b10a      	cbz	r2, 8000468 <_usb_ep0out+0x78>
 8000464:	2106      	movs	r1, #6
 8000466:	4790      	blx	r2
    usbp->ep0state = USB_EP0_ERROR;
 8000468:	2306      	movs	r3, #6
 800046a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800046e:	bd38      	pop	{r3, r4, r5, pc}

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000470:	2305      	movs	r3, #5
 8000472:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
 8000476:	2320      	movs	r3, #32
 8000478:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800047c:	68c3      	ldr	r3, [r0, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800047e:	8902      	ldrh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8000480:	695b      	ldr	r3, [r3, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000482:	f042 0201 	orr.w	r2, r2, #1
 8000486:	8102      	strh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 8000488:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 800048a:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 800048c:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800048e:	f002 fb17 	bl	8002ac0 <usb_lld_start_in.constprop.10>
 8000492:	f385 8811 	msr	BASEPRI, r5
 8000496:	bd38      	pop	{r3, r4, r5, pc}
 8000498:	40005c00 	.word	0x40005c00
 800049c:	00000000 	.word	0x00000000

080004a0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80004a0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80004a2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80004a6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80004a8:	2b06      	cmp	r3, #6
 80004aa:	d826      	bhi.n	80004fa <_usb_ep0in+0x5a>
 80004ac:	e8df f003 	tbb	[pc, r3]
 80004b0:	04362604 	.word	0x04362604
 80004b4:	4c04      	.short	0x4c04
 80004b6:	04          	.byte	0x04
 80004b7:	00          	.byte	0x00
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80004b8:	4931      	ldr	r1, [pc, #196]	; (8000580 <_usb_ep0in+0xe0>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80004ba:	6842      	ldr	r2, [r0, #4]
 80004bc:	680b      	ldr	r3, [r1, #0]
 80004be:	6812      	ldr	r2, [r2, #0]
 80004c0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80004c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004c8:	f083 0310 	eor.w	r3, r3, #16
 80004cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d4:	600b      	str	r3, [r1, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80004d6:	680b      	ldr	r3, [r1, #0]
 80004d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80004dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80004e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ec:	600b      	str	r3, [r1, #0]
 80004ee:	b10a      	cbz	r2, 80004f4 <_usb_ep0in+0x54>
 80004f0:	2106      	movs	r1, #6
 80004f2:	4790      	blx	r2
    usbp->ep0state = USB_EP0_ERROR;
 80004f4:	2306      	movs	r3, #6
 80004f6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80004fa:	bd38      	pop	{r3, r4, r5, pc}
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 80004fc:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 8000500:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8000504:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000506:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800050a:	4293      	cmp	r3, r2
 800050c:	d906      	bls.n	800051c <_usb_ep0in+0x7c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800050e:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000510:	8a1d      	ldrh	r5, [r3, #16]
 8000512:	fbb2 f3f5 	udiv	r3, r2, r5
 8000516:	fb05 2513 	mls	r5, r5, r3, r2
 800051a:	b1e5      	cbz	r5, 8000556 <_usb_ep0in+0xb6>
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800051c:	2303      	movs	r3, #3
 800051e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000522:	2320      	movs	r3, #32
 8000524:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8000528:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800052a:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800052c:	699b      	ldr	r3, [r3, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
 800052e:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000530:	f042 0201 	orr.w	r2, r2, #1
 8000534:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8000536:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 8000538:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 800053a:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 800053c:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800053e:	f002 faf7 	bl	8002b30 <usb_lld_start_out.constprop.9>
 8000542:	f385 8811 	msr	BASEPRI, r5
 8000546:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8000548:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800054a:	b103      	cbz	r3, 800054e <_usb_ep0in+0xae>
      usbp->ep0endcb(usbp);
 800054c:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800054e:	2300      	movs	r3, #0
 8000550:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000554:	bd38      	pop	{r3, r4, r5, pc}
 8000556:	2320      	movs	r3, #32
 8000558:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800055c:	68c3      	ldr	r3, [r0, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800055e:	8902      	ldrh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8000560:	695b      	ldr	r3, [r3, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000562:	f042 0201 	orr.w	r2, r2, #1
 8000566:	8102      	strh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 8000568:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 800056a:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 800056c:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800056e:	f002 faa7 	bl	8002ac0 <usb_lld_start_in.constprop.10>
 8000572:	f385 8811 	msr	BASEPRI, r5
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8000576:	2302      	movs	r3, #2
 8000578:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800057c:	bd38      	pop	{r3, r4, r5, pc}
 800057e:	bf00      	nop
 8000580:	40005c00 	.word	0x40005c00
	...

08000590 <_usb_ep0setup>:
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8000590:	4bb2      	ldr	r3, [pc, #712]	; (800085c <_usb_ep0setup+0x2cc>)
 8000592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000594:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000598:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800059c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80005a0:	b570      	push	{r4, r5, r6, lr}
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 80005a2:	688b      	ldr	r3, [r1, #8]
 80005a4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80005a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80005ac:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80005ae:	2200      	movs	r2, #0
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 80005b6:	f103 0010 	add.w	r0, r3, #16
  usbReadSetup(usbp, ep, usbp->setup);
 80005ba:	f104 0274 	add.w	r2, r4, #116	; 0x74
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80005be:	f853 1b04 	ldr.w	r1, [r3], #4
 80005c2:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 80005c6:	4283      	cmp	r3, r0
 80005c8:	d1f9      	bne.n	80005be <_usb_ep0setup+0x2e>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80005ca:	6863      	ldr	r3, [r4, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	b353      	cbz	r3, 8000626 <_usb_ep0setup+0x96>
      !(usbp->config->requests_hook_cb(usbp))) {
 80005d0:	4620      	mov	r0, r4
 80005d2:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80005d4:	b338      	cbz	r0, 8000626 <_usb_ep0setup+0x96>
 80005d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80005d8:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80005dc:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 80005e0:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 80005e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80005e8:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 80005ea:	bf3c      	itt	cc
 80005ec:	66e2      	strcc	r2, [r4, #108]	; 0x6c
 80005ee:	4613      	movcc	r3, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80005f0:	0602      	lsls	r2, r0, #24
 80005f2:	f100 80af 	bmi.w	8000754 <_usb_ep0setup+0x1c4>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d161      	bne.n	80006be <_usb_ep0setup+0x12e>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80005fa:	2305      	movs	r3, #5
 80005fc:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000600:	2320      	movs	r3, #32
 8000602:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8000606:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000608:	8922      	ldrh	r2, [r4, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800060a:	695b      	ldr	r3, [r3, #20]
  /*lint -restore*/
  isp->txbuf  = buf;
 800060c:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800060e:	f042 0201 	orr.w	r2, r2, #1
 8000612:	8122      	strh	r2, [r4, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8000614:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 8000616:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 8000618:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 800061a:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800061c:	f002 fa50 	bl	8002ac0 <usb_lld_start_in.constprop.10>
 8000620:	f385 8811 	msr	BASEPRI, r5
 8000624:	bd70      	pop	{r4, r5, r6, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8000626:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800062a:	f010 0560 	ands.w	r5, r0, #96	; 0x60
 800062e:	4602      	mov	r2, r0
 8000630:	d022      	beq.n	8000678 <_usb_ep0setup+0xe8>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000632:	498a      	ldr	r1, [pc, #552]	; (800085c <_usb_ep0setup+0x2cc>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000634:	6862      	ldr	r2, [r4, #4]
 8000636:	680b      	ldr	r3, [r1, #0]
 8000638:	6812      	ldr	r2, [r2, #0]
 800063a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800063e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000642:	f083 0310 	eor.w	r3, r3, #16
 8000646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064e:	600b      	str	r3, [r1, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000650:	680b      	ldr	r3, [r1, #0]
 8000652:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800065a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800065e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000666:	600b      	str	r3, [r1, #0]
 8000668:	b112      	cbz	r2, 8000670 <_usb_ep0setup+0xe0>
 800066a:	2106      	movs	r1, #6
 800066c:	4620      	mov	r0, r4
 800066e:	4790      	blx	r2
      usbp->ep0state = USB_EP0_ERROR;
 8000670:	2306      	movs	r3, #6
 8000672:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000676:	bd70      	pop	{r4, r5, r6, pc}
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
 8000678:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800067c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8000680:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000688:	f000 8165 	beq.w	8000956 <_usb_ep0setup+0x3c6>
 800068c:	d92e      	bls.n	80006ec <_usb_ep0setup+0x15c>
 800068e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000692:	f000 8147 	beq.w	8000924 <_usb_ep0setup+0x394>
 8000696:	d975      	bls.n	8000784 <_usb_ep0setup+0x1f4>
 8000698:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800069c:	f000 8097 	beq.w	80007ce <_usb_ep0setup+0x23e>
 80006a0:	f640 4202 	movw	r2, #3074	; 0xc02
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f000 8136 	beq.w	8000916 <_usb_ep0setup+0x386>
 80006aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ae:	d1c0      	bne.n	8000632 <_usb_ep0setup+0xa2>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 80006b0:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80006b4:	2301      	movs	r3, #1
 80006b6:	6725      	str	r5, [r4, #112]	; 0x70
 80006b8:	66a2      	str	r2, [r4, #104]	; 0x68
 80006ba:	66e3      	str	r3, [r4, #108]	; 0x6c
 80006bc:	e78e      	b.n	80005dc <_usb_ep0setup+0x4c>
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 80006be:	2304      	movs	r3, #4
 80006c0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80006c4:	2320      	movs	r3, #32
 80006c6:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80006ca:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80006cc:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80006ce:	699b      	ldr	r3, [r3, #24]
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80006d0:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 80006d2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80006d4:	f042 0201 	orr.w	r2, r2, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 80006d8:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80006da:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80006dc:	4620      	mov	r0, r4
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 80006de:	e883 0062 	stmia.w	r3, {r1, r5, r6}
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80006e2:	f002 fa25 	bl	8002b30 <usb_lld_start_out.constprop.9>
 80006e6:	f385 8811 	msr	BASEPRI, r5
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	f000 80f9 	beq.w	80008e4 <_usb_ep0setup+0x354>
 80006f2:	f240 80ee 	bls.w	80008d2 <_usb_ep0setup+0x342>
 80006f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006fa:	d07e      	beq.n	80007fa <_usb_ep0setup+0x26a>
 80006fc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000700:	d197      	bne.n	8000632 <_usb_ep0setup+0xa2>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000702:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000706:	2b00      	cmp	r3, #0
 8000708:	d193      	bne.n	8000632 <_usb_ep0setup+0xa2>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800070a:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800070e:	f011 030f 	ands.w	r3, r1, #15
 8000712:	d01a      	beq.n	800074a <_usb_ep0setup+0x1ba>
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800071a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800071e:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000722:	6819      	ldr	r1, [r3, #0]
 8000724:	f040 8131 	bne.w	800098a <_usb_ep0setup+0x3fa>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8000728:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 800072c:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8000730:	d00b      	beq.n	800074a <_usb_ep0setup+0x1ba>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800073c:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 8000740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800074a:	2300      	movs	r3, #0
 800074c:	66a3      	str	r3, [r4, #104]	; 0x68
 800074e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8000750:	6723      	str	r3, [r4, #112]	; 0x70
 8000752:	e023      	b.n	800079c <_usb_ep0setup+0x20c>
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8000754:	b32b      	cbz	r3, 80007a2 <_usb_ep0setup+0x212>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8000756:	2301      	movs	r3, #1
 8000758:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800075c:	2320      	movs	r3, #32
 800075e:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8000762:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000764:	8922      	ldrh	r2, [r4, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8000766:	695b      	ldr	r3, [r3, #20]
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000768:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 800076a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800076c:	f042 0201 	orr.w	r2, r2, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8000770:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000772:	8122      	strh	r2, [r4, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8000774:	4620      	mov	r0, r4
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8000776:	e883 0062 	stmia.w	r3, {r1, r5, r6}
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800077a:	f002 f9a1 	bl	8002ac0 <usb_lld_start_in.constprop.10>
 800077e:	f385 8811 	msr	BASEPRI, r5
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000784:	f240 3102 	movw	r1, #770	; 0x302
 8000788:	428b      	cmp	r3, r1
 800078a:	d045      	beq.n	8000818 <_usb_ep0setup+0x288>
 800078c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000790:	f47f af4f 	bne.w	8000632 <_usb_ep0setup+0xa2>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8000794:	4b32      	ldr	r3, [pc, #200]	; (8000860 <_usb_ep0setup+0x2d0>)
 8000796:	66a5      	str	r5, [r4, #104]	; 0x68
 8000798:	66e5      	str	r5, [r4, #108]	; 0x6c
 800079a:	6723      	str	r3, [r4, #112]	; 0x70
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800079c:	0613      	lsls	r3, r2, #24
 800079e:	f57f af2c 	bpl.w	80005fa <_usb_ep0setup+0x6a>
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 80007a2:	2303      	movs	r3, #3
 80007a4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80007a8:	2320      	movs	r3, #32
 80007aa:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80007ae:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80007b0:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80007b2:	699b      	ldr	r3, [r3, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
 80007b4:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80007b6:	f042 0201 	orr.w	r2, r2, #1
 80007ba:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80007bc:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 80007be:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 80007c0:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 80007c2:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80007c4:	f002 f9b4 	bl	8002b30 <usb_lld_start_out.constprop.9>
 80007c8:	f385 8811 	msr	BASEPRI, r5
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host only if it is different
       from the current configuration.*/
    if (usbp->configuration != usbp->setup[2]) {
 80007ce:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80007d2:	f894 107f 	ldrb.w	r1, [r4, #127]	; 0x7f
 80007d6:	4299      	cmp	r1, r3
 80007d8:	d0b7      	beq.n	800074a <_usb_ep0setup+0x1ba>
      /* If the USB device is already active then we have to perform the clear
         procedure on the current configuration.*/
      if (usbp->state == USB_ACTIVE) {
 80007da:	7822      	ldrb	r2, [r4, #0]
 80007dc:	2a04      	cmp	r2, #4
 80007de:	d041      	beq.n	8000864 <_usb_ep0setup+0x2d4>
        osalSysUnlockFromISR ();
        usbp->configuration = 0U;
        usbp->state = USB_SELECTED;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
      }
      if (usbp->setup[2] != 0U) {
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d037      	beq.n	8000854 <_usb_ep0setup+0x2c4>
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
        usbp->state = USB_ACTIVE;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80007e4:	6862      	ldr	r2, [r4, #4]
        usbp->state = USB_SELECTED;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
      }
      if (usbp->setup[2] != 0U) {
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
 80007e6:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80007ea:	6813      	ldr	r3, [r2, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
      }
      if (usbp->setup[2] != 0U) {
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
        usbp->state = USB_ACTIVE;
 80007ec:	2204      	movs	r2, #4
 80007ee:	7022      	strb	r2, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80007f0:	b383      	cbz	r3, 8000854 <_usb_ep0setup+0x2c4>
 80007f2:	2102      	movs	r1, #2
 80007f4:	4620      	mov	r0, r4
 80007f6:	4798      	blx	r3
 80007f8:	e02c      	b.n	8000854 <_usb_ep0setup+0x2c4>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80007fa:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80007fe:	2b01      	cmp	r3, #1
 8000800:	f47f af17 	bne.w	8000632 <_usb_ep0setup+0xa2>
      usbp->status &= ~2U;
 8000804:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000808:	66a5      	str	r5, [r4, #104]	; 0x68
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800080a:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800080e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000810:	6725      	str	r5, [r4, #112]	; 0x70
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8000812:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8000816:	e7c1      	b.n	800079c <_usb_ep0setup+0x20c>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000818:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800081c:	2b00      	cmp	r3, #0
 800081e:	f47f af08 	bne.w	8000632 <_usb_ep0setup+0xa2>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000822:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8000826:	f011 030f 	ands.w	r3, r1, #15
 800082a:	d08e      	beq.n	800074a <_usb_ep0setup+0x1ba>
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000832:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000836:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	f100 80ba 	bmi.w	80009b2 <_usb_ep0setup+0x422>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800083e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000842:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000846:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800084a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800084e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 8000858:	e777      	b.n	800074a <_usb_ep0setup+0x1ba>
 800085a:	bf00      	nop
 800085c:	40005c00 	.word	0x40005c00
 8000860:	080002e1 	.word	0x080002e1
 8000864:	2320      	movs	r3, #32
 8000866:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
 800086a:	8922      	ldrh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 800086c:	8963      	ldrh	r3, [r4, #10]

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
 800086e:	f002 0201 	and.w	r2, r2, #1
  usbp->receiving    &= 1U;
 8000872:	f003 0301 	and.w	r3, r3, #1

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
 8000876:	8122      	strh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 8000878:	8163      	strh	r3, [r4, #10]
 800087a:	f104 0228 	add.w	r2, r4, #40	; 0x28
 800087e:	f104 030c 	add.w	r3, r4, #12
      if (usbp->epc[i]->out_state != NULL) {
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
    }
#endif
    usbp->epc[i] = NULL;
 8000882:	f843 5f04 	str.w	r5, [r3, #4]!
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
  usbp->receiving    &= 1U;

  for (i = 1; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8000886:	4293      	cmp	r3, r2
 8000888:	d1fb      	bne.n	8000882 <_usb_ep0setup+0x2f2>
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* Disabling all endpoints.*/
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8000890:	2101      	movs	r1, #1
    EPR_TOGGLE(i, 0);
 8000892:	f248 0080 	movw	r0, #32896	; 0x8080
 8000896:	008b      	lsls	r3, r1, #2
 8000898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800089c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* Disabling all endpoints.*/
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80008a0:	3101      	adds	r1, #1
    EPR_TOGGLE(i, 0);
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* Disabling all endpoints.*/
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80008ac:	2908      	cmp	r1, #8
    EPR_TOGGLE(i, 0);
 80008ae:	601a      	str	r2, [r3, #0]
    EPR_SET(i, 0);
 80008b0:	6018      	str	r0, [r3, #0]

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* Disabling all endpoints.*/
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80008b2:	d1f0      	bne.n	8000896 <_usb_ep0setup+0x306>
 80008b4:	2300      	movs	r3, #0
 80008b6:	f383 8811 	msr	BASEPRI, r3
        osalSysLockFromISR ();
        usbDisableEndpointsI(usbp);
        osalSysUnlockFromISR ();
        usbp->configuration = 0U;
        usbp->state = USB_SELECTED;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80008ba:	6862      	ldr	r2, [r4, #4]
      if (usbp->state == USB_ACTIVE) {
        /* Current configuration cleared.*/
        osalSysLockFromISR ();
        usbDisableEndpointsI(usbp);
        osalSysUnlockFromISR ();
        usbp->configuration = 0U;
 80008bc:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80008c0:	6813      	ldr	r3, [r2, #0]
        /* Current configuration cleared.*/
        osalSysLockFromISR ();
        usbDisableEndpointsI(usbp);
        osalSysUnlockFromISR ();
        usbp->configuration = 0U;
        usbp->state = USB_SELECTED;
 80008c2:	2103      	movs	r1, #3
 80008c4:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80008c6:	b10b      	cbz	r3, 80008cc <_usb_ep0setup+0x33c>
 80008c8:	4620      	mov	r0, r4
 80008ca:	4798      	blx	r3
 80008cc:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80008d0:	e786      	b.n	80007e0 <_usb_ep0setup+0x250>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80008d2:	b9eb      	cbnz	r3, 8000910 <_usb_ep0setup+0x380>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80008d4:	2202      	movs	r2, #2
 80008d6:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 80008da:	6723      	str	r3, [r4, #112]	; 0x70
 80008dc:	66a1      	str	r1, [r4, #104]	; 0x68
 80008de:	66e2      	str	r2, [r4, #108]	; 0x6c
 80008e0:	4613      	mov	r3, r2
 80008e2:	e67b      	b.n	80005dc <_usb_ep0setup+0x4c>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80008e4:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80008e8:	4939      	ldr	r1, [pc, #228]	; (80009d0 <_usb_ep0setup+0x440>)
 80008ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80008ee:	f002 020f 	and.w	r2, r2, #15
 80008f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008f6:	d13d      	bne.n	8000974 <_usb_ep0setup+0x3e4>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 80008f8:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 80008fc:	f43f ae99 	beq.w	8000632 <_usb_ep0setup+0xa2>
 8000900:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000904:	d13c      	bne.n	8000980 <_usb_ep0setup+0x3f0>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8000906:	4a33      	ldr	r2, [pc, #204]	; (80009d4 <_usb_ep0setup+0x444>)
 8000908:	66e3      	str	r3, [r4, #108]	; 0x6c
 800090a:	6725      	str	r5, [r4, #112]	; 0x70
 800090c:	66a2      	str	r2, [r4, #104]	; 0x68
 800090e:	e665      	b.n	80005dc <_usb_ep0setup+0x4c>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000910:	2b01      	cmp	r3, #1
 8000912:	f47f ae8e 	bne.w	8000632 <_usb_ep0setup+0xa2>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <_usb_ep0setup+0x448>)
 8000918:	66a3      	str	r3, [r4, #104]	; 0x68
 800091a:	2200      	movs	r2, #0
 800091c:	2302      	movs	r3, #2
 800091e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8000920:	6722      	str	r2, [r4, #112]	; 0x70
 8000922:	e65b      	b.n	80005dc <_usb_ep0setup+0x4c>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000924:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
 8000928:	6861      	ldr	r1, [r4, #4]
 800092a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 800092e:	684e      	ldr	r6, [r1, #4]
 8000930:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000934:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8000938:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800093c:	4620      	mov	r0, r4
 800093e:	47b0      	blx	r6
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8000940:	2800      	cmp	r0, #0
 8000942:	f43f ae76 	beq.w	8000632 <_usb_ep0setup+0xa2>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8000946:	6842      	ldr	r2, [r0, #4]
 8000948:	6803      	ldr	r3, [r0, #0]
 800094a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800094c:	66a2      	str	r2, [r4, #104]	; 0x68
 800094e:	6725      	str	r5, [r4, #112]	; 0x70
 8000950:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 8000954:	e642      	b.n	80005dc <_usb_ep0setup+0x4c>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000956:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800095a:	2b01      	cmp	r3, #1
 800095c:	f47f ae69 	bne.w	8000632 <_usb_ep0setup+0xa2>
      usbp->status |= 2U;
 8000960:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000964:	66a5      	str	r5, [r4, #104]	; 0x68
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8000966:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800096a:	66e5      	str	r5, [r4, #108]	; 0x6c
 800096c:	6725      	str	r5, [r4, #112]	; 0x70
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800096e:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8000972:	e713      	b.n	800079c <_usb_ep0setup+0x20c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000974:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8000978:	f43f ae5b 	beq.w	8000632 <_usb_ep0setup+0xa2>
 800097c:	2a10      	cmp	r2, #16
 800097e:	d0c2      	beq.n	8000906 <_usb_ep0setup+0x376>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8000980:	4a16      	ldr	r2, [pc, #88]	; (80009dc <_usb_ep0setup+0x44c>)
 8000982:	66e3      	str	r3, [r4, #108]	; 0x6c
 8000984:	6725      	str	r5, [r4, #112]	; 0x70
 8000986:	66a2      	str	r2, [r4, #104]	; 0x68
 8000988:	e628      	b.n	80005dc <_usb_ep0setup+0x4c>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 800098a:	f001 0130 	and.w	r1, r1, #48	; 0x30
 800098e:	2930      	cmp	r1, #48	; 0x30
 8000990:	f43f aedb 	beq.w	800074a <_usb_ep0setup+0x1ba>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800099a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800099e:	f082 0220 	eor.w	r2, r2, #32
 80009a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 80009b0:	e6cb      	b.n	800074a <_usb_ep0setup+0x1ba>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80009b2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80009b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009ba:	f082 0210 	eor.w	r2, r2, #16
 80009be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 80009cc:	e6bd      	b.n	800074a <_usb_ep0setup+0x1ba>
 80009ce:	bf00      	nop
 80009d0:	40005c00 	.word	0x40005c00
 80009d4:	08002c20 	.word	0x08002c20
 80009d8:	08002b80 	.word	0x08002b80
 80009dc:	08002b90 	.word	0x08002b90

080009e0 <_port_irq_epilogue>:
 80009e0:	2320      	movs	r3, #32
 80009e2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <_port_irq_epilogue+0x50>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80009ee:	d102      	bne.n	80009f6 <_port_irq_epilogue+0x16>
 80009f0:	f383 8811 	msr	BASEPRI, r3
 80009f4:	4770      	bx	lr
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80009f6:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80009fa:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80009fe:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000a00:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000a04:	68d2      	ldr	r2, [r2, #12]
 8000a06:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000a0a:	f843 1c4c 	str.w	r1, [r3, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000a0e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8000a12:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <_port_irq_epilogue+0x58>)
 8000a18:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000a1a:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000a1c:	6889      	ldr	r1, [r1, #8]
 8000a1e:	6892      	ldr	r2, [r2, #8]
 8000a20:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000a22:	bf8c      	ite	hi
 8000a24:	4a05      	ldrhi	r2, [pc, #20]	; (8000a3c <_port_irq_epilogue+0x5c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000a26:	4a06      	ldrls	r2, [pc, #24]	; (8000a40 <_port_irq_epilogue+0x60>)
 8000a28:	f843 2c50 	str.w	r2, [r3, #-80]
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	e000ef30 	.word	0xe000ef30
 8000a38:	20000c30 	.word	0x20000c30
 8000a3c:	080002d9 	.word	0x080002d9
 8000a40:	080002dc 	.word	0x080002dc
	...

08000a50 <Vector7C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <Vector7C+0x30>)
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <Vector7C+0x34>)
 8000a54:	6819      	ldr	r1, [r3, #0]
 8000a56:	6812      	ldr	r2, [r2, #0]
 8000a58:	0c09      	lsrs	r1, r1, #16
 8000a5a:	f001 010e 	and.w	r1, r1, #14
 8000a5e:	4211      	tst	r1, r2
 8000a60:	d00b      	beq.n	8000a7a <Vector7C+0x2a>
 8000a62:	4809      	ldr	r0, [pc, #36]	; (8000a88 <Vector7C+0x38>)
 8000a64:	6a02      	ldr	r2, [r0, #32]
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8000a66:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8000a68:	040c      	lsls	r4, r1, #16
 8000a6a:	605c      	str	r4, [r3, #4]
 8000a6c:	b10a      	cbz	r2, 8000a72 <Vector7C+0x22>
 8000a6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000a70:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 8000a76:	f7ff bfb3 	b.w	80009e0 <_port_irq_epilogue>
 8000a7a:	f7ff bfb1 	b.w	80009e0 <_port_irq_epilogue>
 8000a7e:	bf00      	nop
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020058 	.word	0x40020058
 8000a88:	20000b50 	.word	0x20000b50
 8000a8c:	00000000 	.word	0x00000000

08000a90 <Vector78>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <Vector78+0x30>)
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <Vector78+0x34>)
 8000a94:	6819      	ldr	r1, [r3, #0]
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	0b09      	lsrs	r1, r1, #12
 8000a9a:	f001 010e 	and.w	r1, r1, #14
 8000a9e:	4211      	tst	r1, r2
 8000aa0:	d00b      	beq.n	8000aba <Vector78+0x2a>
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <Vector78+0x38>)
 8000aa4:	6982      	ldr	r2, [r0, #24]
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000aa6:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000aa8:	030c      	lsls	r4, r1, #12
 8000aaa:	605c      	str	r4, [r3, #4]
 8000aac:	b10a      	cbz	r2, 8000ab2 <Vector78+0x22>
 8000aae:	69c0      	ldr	r0, [r0, #28]
 8000ab0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 8000ab6:	f7ff bf93 	b.w	80009e0 <_port_irq_epilogue>
 8000aba:	f7ff bf91 	b.w	80009e0 <_port_irq_epilogue>
 8000abe:	bf00      	nop
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020044 	.word	0x40020044
 8000ac8:	20000b50 	.word	0x20000b50
 8000acc:	00000000 	.word	0x00000000

08000ad0 <Vector74>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <Vector74+0x30>)
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <Vector74+0x34>)
 8000ad4:	6819      	ldr	r1, [r3, #0]
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	0a09      	lsrs	r1, r1, #8
 8000ada:	f001 010e 	and.w	r1, r1, #14
 8000ade:	4211      	tst	r1, r2
 8000ae0:	d00b      	beq.n	8000afa <Vector74+0x2a>
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <Vector74+0x38>)
 8000ae4:	6902      	ldr	r2, [r0, #16]
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8000ae6:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8000ae8:	020c      	lsls	r4, r1, #8
 8000aea:	605c      	str	r4, [r3, #4]
 8000aec:	b10a      	cbz	r2, 8000af2 <Vector74+0x22>
 8000aee:	6940      	ldr	r0, [r0, #20]
 8000af0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 8000af6:	f7ff bf73 	b.w	80009e0 <_port_irq_epilogue>
 8000afa:	f7ff bf71 	b.w	80009e0 <_port_irq_epilogue>
 8000afe:	bf00      	nop
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020030 	.word	0x40020030
 8000b08:	20000b50 	.word	0x20000b50
 8000b0c:	00000000 	.word	0x00000000

08000b10 <Vector70>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <Vector70+0x30>)
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <Vector70+0x34>)
 8000b14:	6819      	ldr	r1, [r3, #0]
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	0909      	lsrs	r1, r1, #4
 8000b1a:	f001 010e 	and.w	r1, r1, #14
 8000b1e:	4211      	tst	r1, r2
 8000b20:	d00b      	beq.n	8000b3a <Vector70+0x2a>
 8000b22:	4809      	ldr	r0, [pc, #36]	; (8000b48 <Vector70+0x38>)
 8000b24:	6882      	ldr	r2, [r0, #8]
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8000b26:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8000b28:	010c      	lsls	r4, r1, #4
 8000b2a:	605c      	str	r4, [r3, #4]
 8000b2c:	b10a      	cbz	r2, 8000b32 <Vector70+0x22>
 8000b2e:	68c0      	ldr	r0, [r0, #12]
 8000b30:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 8000b36:	f7ff bf53 	b.w	80009e0 <_port_irq_epilogue>
 8000b3a:	f7ff bf51 	b.w	80009e0 <_port_irq_epilogue>
 8000b3e:	bf00      	nop
 8000b40:	40020000 	.word	0x40020000
 8000b44:	4002001c 	.word	0x4002001c
 8000b48:	20000b50 	.word	0x20000b50
 8000b4c:	00000000 	.word	0x00000000

08000b50 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8000b50:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <Vector6C+0x28>)
 8000b54:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <Vector6C+0x2c>)
 8000b56:	6819      	ldr	r1, [r3, #0]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	f001 010e 	and.w	r1, r1, #14
 8000b5e:	4211      	tst	r1, r2
 8000b60:	d005      	beq.n	8000b6e <Vector6C+0x1e>
 8000b62:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <Vector6C+0x30>)
 8000b64:	6059      	str	r1, [r3, #4]
 8000b66:	6813      	ldr	r3, [r2, #0]
 8000b68:	b10b      	cbz	r3, 8000b6e <Vector6C+0x1e>
 8000b6a:	6850      	ldr	r0, [r2, #4]
 8000b6c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8000b6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 8000b72:	f7ff bf35 	b.w	80009e0 <_port_irq_epilogue>
 8000b76:	bf00      	nop
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020008 	.word	0x40020008
 8000b80:	20000b50 	.word	0x20000b50
	...

08000b90 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000b92:	490f      	ldr	r1, [pc, #60]	; (8000bd0 <chTMStopMeasurementX+0x40>)
 8000b94:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000b96:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000b98:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000b9a:	6f4f      	ldr	r7, [r1, #116]	; 0x74
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8000b9c:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000b9e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000ba0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8000ba8:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8000baa:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000bac:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000bae:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000bb2:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000bb4:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000bb8:	bf88      	it	hi
 8000bba:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 8000bbc:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000bbe:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000bc0:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8000bc4:	bf38      	it	cc
 8000bc6:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000bc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bca:	4770      	bx	lr
 8000bcc:	e0001000 	.word	0xe0001000
 8000bd0:	20000c30 	.word	0x20000c30
	...

08000be0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <chSchDoReschedule+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000be2:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8000be4:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8000be6:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000be8:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000bea:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000bec:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8000bee:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000bf0:	7701      	strb	r1, [r0, #28]
 8000bf2:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000bf4:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000bf6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8000bf8:	7725      	strb	r5, [r4, #28]
 8000bfa:	e000      	b.n	8000bfe <chSchDoReschedule+0x1e>
 8000bfc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	428a      	cmp	r2, r1
 8000c02:	d8fb      	bhi.n	8000bfc <chSchDoReschedule+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8000c08:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000c0a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 8000c0c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000c0e:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8000c10:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000c12:	f7ff bb4d 	b.w	80002b0 <_port_switch>
 8000c16:	bf00      	nop
 8000c18:	20000c30 	.word	0x20000c30
 8000c1c:	00000000 	.word	0x00000000

08000c20 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <chSchGoSleepS+0x20>)
 8000c22:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000c24:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000c26:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8000c28:	7708      	strb	r0, [r1, #28]

  tqp->p_next = tp->p_next;
 8000c2a:	6810      	ldr	r0, [r2, #0]
 8000c2c:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000c2e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000c30:	6043      	str	r3, [r0, #4]
 8000c32:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8000c34:	4610      	mov	r0, r2
}
 8000c36:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000c3a:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8000c3c:	f7ff bb38 	b.w	80002b0 <_port_switch>
 8000c40:	20000c30 	.word	0x20000c30
	...

08000c50 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000c50:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000c52:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000c54:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000c56:	d04d      	beq.n	8000cf4 <chSchGoSleepTimeoutS+0xa4>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000c58:	4c41      	ldr	r4, [pc, #260]	; (8000d60 <chSchGoSleepTimeoutS+0x110>)
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000c5a:	4625      	mov	r5, r4
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000c5c:	69a3      	ldr	r3, [r4, #24]
 8000c5e:	9305      	str	r3, [sp, #20]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000c60:	f855 3f1c 	ldr.w	r3, [r5, #28]!
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000c64:	2901      	cmp	r1, #1
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000c66:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8000c6a:	4607      	mov	r7, r0
 8000c6c:	bf98      	it	ls
 8000c6e:	2102      	movls	r1, #2

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000c70:	483c      	ldr	r0, [pc, #240]	; (8000d64 <chSchGoSleepTimeoutS+0x114>)
 8000c72:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
 8000c76:	9004      	str	r0, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000c78:	42ab      	cmp	r3, r5
 8000c7a:	d05b      	beq.n	8000d34 <chSchGoSleepTimeoutS+0xe4>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000c7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000c7e:	1a12      	subs	r2, r2, r0

    if (delta < now - ch.vtlist.vt_lasttime) {
 8000c80:	1889      	adds	r1, r1, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8000c82:	689a      	ldr	r2, [r3, #8]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;

    if (delta < now - ch.vtlist.vt_lasttime) {
 8000c84:	d232      	bcs.n	8000cec <chSchGoSleepTimeoutS+0x9c>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 8000c86:	4291      	cmp	r1, r2
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8000c88:	bf3c      	itt	cc
 8000c8a:	1840      	addcc	r0, r0, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000c8c:	f8ce 0034 	strcc.w	r0, [lr, #52]	; 0x34
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d904      	bls.n	8000c9e <chSchGoSleepTimeoutS+0x4e>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000c94:	681b      	ldr	r3, [r3, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000c96:	1a89      	subs	r1, r1, r2
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	d3fa      	bcc.n	8000c94 <chSchGoSleepTimeoutS+0x44>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	9202      	str	r2, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8000ca2:	ae01      	add	r6, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000ca4:	9301      	str	r3, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8000ca6:	6016      	str	r6, [r2, #0]
  p->vt_prev = vtp;
 8000ca8:	605e      	str	r6, [r3, #4]
  vtp->vt_delta = delta
 8000caa:	9103      	str	r1, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_delta = (systime_t)-1;
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000cb4:	6099      	str	r1, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000cb6:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000cb8:	4638      	mov	r0, r7
 8000cba:	f7ff ffb1 	bl	8000c20 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000cbe:	9b04      	ldr	r3, [sp, #16]
 8000cc0:	b183      	cbz	r3, 8000ce4 <chSchGoSleepTimeoutS+0x94>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000cc2:	69e3      	ldr	r3, [r4, #28]
 8000cc4:	4a26      	ldr	r2, [pc, #152]	; (8000d60 <chSchGoSleepTimeoutS+0x110>)
 8000cc6:	42b3      	cmp	r3, r6
 8000cc8:	d01b      	beq.n	8000d02 <chSchGoSleepTimeoutS+0xb2>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000cca:	9a02      	ldr	r2, [sp, #8]
 8000ccc:	9b01      	ldr	r3, [sp, #4]
 8000cce:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000cd0:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 8000cd2:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000cd4:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000cd6:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8000cd8:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000cda:	d003      	beq.n	8000ce4 <chSchGoSleepTimeoutS+0x94>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000cdc:	6899      	ldr	r1, [r3, #8]
 8000cde:	9a03      	ldr	r2, [sp, #12]
 8000ce0:	440a      	add	r2, r1
 8000ce2:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000ce4:	69a3      	ldr	r3, [r4, #24]
}
 8000ce6:	6a18      	ldr	r0, [r3, #32]
 8000ce8:	b007      	add	sp, #28
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (delta < now - ch.vtlist.vt_lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
 8000cec:	681b      	ldr	r3, [r3, #0]

    if (delta < now - ch.vtlist.vt_lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8000cee:	1a89      	subs	r1, r1, r2
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	e7cd      	b.n	8000c90 <chSchGoSleepTimeoutS+0x40>
 8000cf4:	4c1a      	ldr	r4, [pc, #104]	; (8000d60 <chSchGoSleepTimeoutS+0x110>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000cf6:	f7ff ff93 	bl	8000c20 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8000cfa:	69a3      	ldr	r3, [r4, #24]
}
 8000cfc:	6a18      	ldr	r0, [r3, #32]
 8000cfe:	b007      	add	sp, #28
 8000d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000d02:	9901      	ldr	r1, [sp, #4]
 8000d04:	61d1      	str	r1, [r2, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000d06:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d08:	42a9      	cmp	r1, r5
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000d0a:	604d      	str	r5, [r1, #4]
  vtp->vt_func = NULL;
 8000d0c:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d0e:	d022      	beq.n	8000d56 <chSchGoSleepTimeoutS+0x106>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000d10:	6888      	ldr	r0, [r1, #8]
 8000d12:	9b03      	ldr	r3, [sp, #12]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000d14:	6a92      	ldr	r2, [r2, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000d16:	4403      	add	r3, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d1c:	608b      	str	r3, [r1, #8]
 8000d1e:	6a41      	ldr	r1, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000d20:	1a8a      	subs	r2, r1, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d9de      	bls.n	8000ce4 <chSchGoSleepTimeoutS+0x94>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000d26:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	bf98      	it	ls
 8000d2c:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8000d2e:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d30:	6343      	str	r3, [r0, #52]	; 0x34
 8000d32:	e7d7      	b.n	8000ce4 <chSchGoSleepTimeoutS+0x94>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8000d34:	62a2      	str	r2, [r4, #40]	; 0x28
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8000d36:	1850      	adds	r0, r2, r1
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8000d38:	ae01      	add	r6, sp, #4
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8000d3a:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d3c:	2302      	movs	r3, #2
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000d3e:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000d40:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 8000d42:	9103      	str	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8000d44:	61e6      	str	r6, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 8000d46:	6226      	str	r6, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d48:	f8ce 0034 	str.w	r0, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000d4c:	f8ce 2010 	str.w	r2, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d50:	f8ce 300c 	str.w	r3, [lr, #12]
 8000d54:	e7b0      	b.n	8000cb8 <chSchGoSleepTimeoutS+0x68>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5a:	60d3      	str	r3, [r2, #12]
 8000d5c:	e7c2      	b.n	8000ce4 <chSchGoSleepTimeoutS+0x94>
 8000d5e:	bf00      	nop
 8000d60:	20000c30 	.word	0x20000c30
 8000d64:	08000371 	.word	0x08000371
	...

08000d70 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000d70:	b169      	cbz	r1, 8000d8e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000d74:	b410      	push	{r4}
 8000d76:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000d78:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000d7a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8000d82:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8000d84:	6053      	str	r3, [r2, #4]
}
 8000d86:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000d8a:	f7ff bf61 	b.w	8000c50 <chSchGoSleepTimeoutS>
}
 8000d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d92:	4770      	bx	lr
 8000d94:	20000c30 	.word	0x20000c30
	...

08000da0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8000da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da4:	b083      	sub	sp, #12
 8000da6:	4604      	mov	r4, r0
 8000da8:	460d      	mov	r5, r1
 8000daa:	4616      	mov	r6, r2
 8000dac:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8000dae:	f8d0 801c 	ldr.w	r8, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000db2:	f04f 0920 	mov.w	r9, #32
 8000db6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 8000dba:	2700      	movs	r7, #0
 8000dbc:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8000dbe:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000dc0:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8000dc4:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000dc6:	b303      	cbz	r3, 8000e0a <chOQWriteTimeout+0x6a>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000dc8:	6961      	ldr	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000dca:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000dcc:	1c4a      	adds	r2, r1, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000dce:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8000dd0:	6162      	str	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000dd2:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000dd4:	782b      	ldrb	r3, [r5, #0]
 8000dd6:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000dd8:	6923      	ldr	r3, [r4, #16]
 8000dda:	6961      	ldr	r1, [r4, #20]
 8000ddc:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 8000dde:	bf24      	itt	cs
 8000de0:	68e3      	ldrcs	r3, [r4, #12]
 8000de2:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8000de4:	f1b8 0f00 	cmp.w	r8, #0
 8000de8:	d000      	beq.n	8000dec <chOQWriteTimeout+0x4c>
      nfy(oqp);
 8000dea:	47c0      	blx	r8
 8000dec:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8000df0:	3e01      	subs	r6, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8000df2:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8000df6:	d012      	beq.n	8000e1e <chOQWriteTimeout+0x7e>
 8000df8:	f389 8811 	msr	BASEPRI, r9
 8000dfc:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000dfe:	465d      	mov	r5, fp
 8000e00:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8000e04:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1de      	bne.n	8000dc8 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8000e0a:	9901      	ldr	r1, [sp, #4]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4620      	mov	r0, r4
 8000e10:	f7ff ffae 	bl	8000d70 <chThdEnqueueTimeoutS>
 8000e14:	9b00      	ldr	r3, [sp, #0]
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d0d1      	beq.n	8000dbe <chOQWriteTimeout+0x1e>
 8000e1a:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8000e1e:	4638      	mov	r0, r7
 8000e20:	b003      	add	sp, #12
 8000e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e26:	bf00      	nop
	...

08000e30 <writet.lto_priv.63>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000e30:	3030      	adds	r0, #48	; 0x30
 8000e32:	f7ff bfb5 	b.w	8000da0 <chOQWriteTimeout>
 8000e36:	bf00      	nop
	...

08000e40 <write.lto_priv.57>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000e40:	3030      	adds	r0, #48	; 0x30
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	f7ff bfab 	b.w	8000da0 <chOQWriteTimeout>
 8000e4a:	bf00      	nop
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e52:	4604      	mov	r4, r0
 8000e54:	460f      	mov	r7, r1
 8000e56:	4616      	mov	r6, r2
 8000e58:	2320      	movs	r3, #32
 8000e5a:	f383 8811 	msr	BASEPRI, r3
 8000e5e:	e003      	b.n	8000e68 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000e60:	f7ff ff86 	bl	8000d70 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000e64:	2800      	cmp	r0, #0
 8000e66:	db19      	blt.n	8000e9c <chOQPutTimeout+0x4c>
 8000e68:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4620      	mov	r0, r4
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0f6      	beq.n	8000e60 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000e72:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000e74:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000e76:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000e78:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000e7a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000e7c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000e7e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000e80:	6923      	ldr	r3, [r4, #16]
 8000e82:	6962      	ldr	r2, [r4, #20]
 8000e84:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000e86:	bf24      	itt	cs
 8000e88:	68e3      	ldrcs	r3, [r4, #12]
 8000e8a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8000e8c:	69e3      	ldr	r3, [r4, #28]
 8000e8e:	b10b      	cbz	r3, 8000e94 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8000e90:	4620      	mov	r0, r4
 8000e92:	4798      	blx	r3
 8000e94:	2000      	movs	r0, #0
 8000e96:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8000e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e9c:	f385 8811 	msr	BASEPRI, r5
 8000ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea2:	bf00      	nop
	...

08000eb0 <putt.lto_priv.61>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000eb0:	3030      	adds	r0, #48	; 0x30
 8000eb2:	f7ff bfcd 	b.w	8000e50 <chOQPutTimeout>
 8000eb6:	bf00      	nop
	...

08000ec0 <put.lto_priv.59>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000ec0:	3030      	adds	r0, #48	; 0x30
 8000ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec6:	f7ff bfc3 	b.w	8000e50 <chOQPutTimeout>
 8000eca:	bf00      	nop
 8000ecc:	0000      	movs	r0, r0
	...

08000ed0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	4689      	mov	r9, r1
 8000eda:	4693      	mov	fp, r2
 8000edc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8000ede:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000ee2:	2720      	movs	r7, #32
 8000ee4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8000ee8:	2600      	movs	r6, #0
 8000eea:	9701      	str	r7, [sp, #4]
 8000eec:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8000eee:	f1b8 0f00 	cmp.w	r8, #0
 8000ef2:	d005      	beq.n	8000f00 <chIQReadTimeout+0x30>
      nfy(iqp);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	47c0      	blx	r8
 8000ef8:	e002      	b.n	8000f00 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8000efa:	f7ff ff39 	bl	8000d70 <chThdEnqueueTimeoutS>
 8000efe:	b9e0      	cbnz	r0, 8000f3a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000f00:	68a7      	ldr	r7, [r4, #8]
 8000f02:	4629      	mov	r1, r5
 8000f04:	4620      	mov	r0, r4
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8000f06:	2f00      	cmp	r7, #0
 8000f08:	d0f7      	beq.n	8000efa <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8000f0a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000f0c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000f0e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000f10:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8000f12:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000f14:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000f16:	7813      	ldrb	r3, [r2, #0]
 8000f18:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8000f1c:	6923      	ldr	r3, [r4, #16]
 8000f1e:	69a2      	ldr	r2, [r4, #24]
 8000f20:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000f22:	bf24      	itt	cs
 8000f24:	68e3      	ldrcs	r3, [r4, #12]
 8000f26:	61a3      	strcs	r3, [r4, #24]
 8000f28:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8000f2c:	3601      	adds	r6, #1
    if (--n == 0U) {
 8000f2e:	45b3      	cmp	fp, r6
 8000f30:	d005      	beq.n	8000f3e <chIQReadTimeout+0x6e>
 8000f32:	9b01      	ldr	r3, [sp, #4]
 8000f34:	f383 8811 	msr	BASEPRI, r3
 8000f38:	e7d9      	b.n	8000eee <chIQReadTimeout+0x1e>
 8000f3a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8000f3e:	4630      	mov	r0, r6
 8000f40:	b003      	add	sp, #12
 8000f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f46:	bf00      	nop
	...

08000f50 <readt.lto_priv.64>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000f50:	300c      	adds	r0, #12
 8000f52:	f7ff bfbd 	b.w	8000ed0 <chIQReadTimeout>
 8000f56:	bf00      	nop
	...

08000f60 <read.lto_priv.58>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000f60:	300c      	adds	r0, #12
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	f7ff bfb3 	b.w	8000ed0 <chIQReadTimeout>
 8000f6a:	bf00      	nop
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8000f70:	b570      	push	{r4, r5, r6, lr}
 8000f72:	2320      	movs	r3, #32
 8000f74:	460e      	mov	r6, r1
 8000f76:	4604      	mov	r4, r0
 8000f78:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8000f7c:	69c3      	ldr	r3, [r0, #28]
 8000f7e:	b12b      	cbz	r3, 8000f8c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8000f80:	4798      	blx	r3
 8000f82:	e003      	b.n	8000f8c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000f84:	f7ff fef4 	bl	8000d70 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	db15      	blt.n	8000fb8 <chIQGetTimeout+0x48>
 8000f8c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000f8e:	4631      	mov	r1, r6
 8000f90:	4620      	mov	r0, r4
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	d0f6      	beq.n	8000f84 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000f96:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000f98:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8000f9a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000f9c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000f9e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8000fa0:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000fa2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000fa4:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000fa6:	bf28      	it	cs
 8000fa8:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000faa:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000fac:	bf28      	it	cs
 8000fae:	61a3      	strcs	r3, [r4, #24]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	f385 8811 	msr	BASEPRI, r5
 8000fbc:	bd70      	pop	{r4, r5, r6, pc}
 8000fbe:	bf00      	nop

08000fc0 <gett.lto_priv.62>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000fc0:	300c      	adds	r0, #12
 8000fc2:	f7ff bfd5 	b.w	8000f70 <chIQGetTimeout>
 8000fc6:	bf00      	nop
	...

08000fd0 <get.lto_priv.60>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000fd0:	300c      	adds	r0, #12
 8000fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd6:	f7ff bfcb 	b.w	8000f70 <chIQGetTimeout>
 8000fda:	bf00      	nop
 8000fdc:	0000      	movs	r0, r0
	...

08000fe0 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000fe6:	b410      	push	{r4}
 8000fe8:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000fea:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000fec:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	428a      	cmp	r2, r1
 8000ff2:	d2fb      	bcs.n	8000fec <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000ff8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8000ffa:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000ffc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000ffe:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000c30 	.word	0x20000c30
 800100c:	00000000 	.word	0x00000000

08001010 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001010:	6803      	ldr	r3, [r0, #0]
 8001012:	b12b      	cbz	r3, 8001020 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8001014:	2200      	movs	r2, #0
 8001016:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001018:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800101a:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 800101c:	f7ff bfe0 	b.w	8000fe0 <chSchReadyI>
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
	...

08001030 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	2220      	movs	r2, #32
 8001034:	4603      	mov	r3, r0
 8001036:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <chThdExit+0x44>)
 800103c:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800103e:	6a60      	ldr	r0, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8001040:	6223      	str	r3, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001042:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001046:	4285      	cmp	r5, r0
 8001048:	d006      	beq.n	8001058 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800104a:	6803      	ldr	r3, [r0, #0]
 800104c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800104e:	f7ff ffc7 	bl	8000fe0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001052:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001054:	42a8      	cmp	r0, r5
 8001056:	d1f8      	bne.n	800104a <chThdExit+0x1a>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001058:	7f63      	ldrb	r3, [r4, #29]
 800105a:	079b      	lsls	r3, r3, #30
 800105c:	d104      	bne.n	8001068 <chThdExit+0x38>
    REG_REMOVE(tp);
 800105e:	6963      	ldr	r3, [r4, #20]
 8001060:	6922      	ldr	r2, [r4, #16]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	6922      	ldr	r2, [r4, #16]
 8001066:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001068:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 800106a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800106e:	f7ff bdd7 	b.w	8000c20 <chSchGoSleepS>
 8001072:	bf00      	nop
 8001074:	20000c30 	.word	0x20000c30
	...

08001080 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001080:	e7fe      	b.n	8001080 <BusFault_Handler>
 8001082:	bf00      	nop
	...

08001090 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	4f13      	ldr	r7, [pc, #76]	; (80010e0 <__init_ram_areas+0x50>)
 8001094:	4d13      	ldr	r5, [pc, #76]	; (80010e4 <__init_ram_areas+0x54>)
 8001096:	4c14      	ldr	r4, [pc, #80]	; (80010e8 <__init_ram_areas+0x58>)
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <__init_ram_areas+0x5c>)
 800109a:	4915      	ldr	r1, [pc, #84]	; (80010f0 <__init_ram_areas+0x60>)
 800109c:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80010a0:	2600      	movs	r6, #0
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 80010a2:	429c      	cmp	r4, r3
 80010a4:	d911      	bls.n	80010ca <__init_ram_areas+0x3a>
 80010a6:	3904      	subs	r1, #4
 80010a8:	461a      	mov	r2, r3
      *p = *tp;
 80010aa:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80010ae:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 80010b2:	4294      	cmp	r4, r2
 80010b4:	d8f9      	bhi.n	80010aa <__init_ram_areas+0x1a>
 80010b6:	43da      	mvns	r2, r3
 80010b8:	4414      	add	r4, r2
 80010ba:	f024 0403 	bic.w	r4, r4, #3
 80010be:	3404      	adds	r4, #4
 80010c0:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80010c2:	429d      	cmp	r5, r3
 80010c4:	d903      	bls.n	80010ce <__init_ram_areas+0x3e>
      *p = 0;
 80010c6:	f843 6b04 	str.w	r6, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80010ca:	429d      	cmp	r5, r3
 80010cc:	d8fb      	bhi.n	80010c6 <__init_ram_areas+0x36>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80010ce:	4577      	cmp	r7, lr
 80010d0:	d005      	beq.n	80010de <__init_ram_areas+0x4e>
 80010d2:	6939      	ldr	r1, [r7, #16]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	69bc      	ldr	r4, [r7, #24]
 80010d8:	69fd      	ldr	r5, [r7, #28]
 80010da:	3710      	adds	r7, #16
 80010dc:	e7e1      	b.n	80010a2 <__init_ram_areas+0x12>
 80010de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e0:	08002ba0 	.word	0x08002ba0
 80010e4:	20000e3c 	.word	0x20000e3c
 80010e8:	20000e3c 	.word	0x20000e3c
 80010ec:	20000e3c 	.word	0x20000e3c
 80010f0:	08002e18 	.word	0x08002e18
	...

08001100 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001100:	e7fe      	b.n	8001100 <__default_exit>
 8001102:	bf00      	nop
	...

08001110 <__late_init>:
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
	...

08001120 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
	...

08001130 <notify1.lto_priv.55>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8001130:	4a02      	ldr	r2, [pc, #8]	; (800113c <notify1.lto_priv.55+0xc>)
 8001132:	6813      	ldr	r3, [r2, #0]
 8001134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4770      	bx	lr
 800113c:	40013800 	.word	0x40013800

08001140 <spi_lld_serve_tx_interrupt.lto_priv.53>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001140:	070b      	lsls	r3, r1, #28
 8001142:	d400      	bmi.n	8001146 <spi_lld_serve_tx_interrupt.lto_priv.53+0x6>
 8001144:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001146:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8001148:	4b01      	ldr	r3, [pc, #4]	; (8001150 <spi_lld_serve_tx_interrupt.lto_priv.53+0x10>)
 800114a:	4a02      	ldr	r2, [pc, #8]	; (8001154 <spi_lld_serve_tx_interrupt.lto_priv.53+0x14>)
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
 800114e:	e7fe      	b.n	800114e <spi_lld_serve_tx_interrupt.lto_priv.53+0xe>
 8001150:	20000c30 	.word	0x20000c30
 8001154:	08002c30 	.word	0x08002c30
	...

08001160 <Vector16C>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8001160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8001164:	4ba2      	ldr	r3, [pc, #648]	; (80013f0 <Vector16C+0x290>)
 8001166:	6c5d      	ldr	r5, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 8001168:	056f      	lsls	r7, r5, #21
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 800116a:	b083      	sub	sp, #12
  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 800116c:	f100 8144 	bmi.w	80013f8 <Vector16C+0x298>

    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8001170:	052e      	lsls	r6, r5, #20
 8001172:	f100 8121 	bmi.w	80013b8 <Vector16C+0x258>

    _usb_suspend(usbp);
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8001176:	04ec      	lsls	r4, r5, #19
 8001178:	d508      	bpl.n	800118c <Vector16C+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 800117a:	4b9d      	ldr	r3, [pc, #628]	; (80013f0 <Vector16C+0x290>)
 800117c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 800117e:	0410      	lsls	r0, r2, #16
 8001180:	f140 819a 	bpl.w	80014b8 <Vector16C+0x358>
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8001184:	4b9a      	ldr	r3, [pc, #616]	; (80013f0 <Vector16C+0x290>)
 8001186:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 800118c:	05a9      	lsls	r1, r5, #22
 800118e:	d50b      	bpl.n	80011a8 <Vector16C+0x48>
    _usb_isr_invoke_sof_cb(usbp);
 8001190:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80013f4 <Vector16C+0x294>
 8001194:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	b10b      	cbz	r3, 80011a0 <Vector16C+0x40>
 800119c:	4640      	mov	r0, r8
 800119e:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 80011a0:	4b93      	ldr	r3, [pc, #588]	; (80013f0 <Vector16C+0x290>)
 80011a2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 80011a8:	042a      	lsls	r2, r5, #16
 80011aa:	f140 80d4 	bpl.w	8001356 <Vector16C+0x1f6>
 80011ae:	f8df 8244 	ldr.w	r8, [pc, #580]	; 80013f4 <Vector16C+0x294>
 * @notapi
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80011b2:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80013f0 <Vector16C+0x290>
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 80011b6:	f005 050f 	and.w	r5, r5, #15
 80011ba:	00ac      	lsls	r4, r5, #2
 80011bc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80011c0:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 * @notapi
 */
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
  size_t n;
  uint32_t epr = STM32_USB->EPR[ep];
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80011c4:	1cae      	adds	r6, r5, #2
 *
 * @notapi
 */
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
  size_t n;
  uint32_t epr = STM32_USB->EPR[ep];
 80011c6:	f8d4 9000 	ldr.w	r9, [r4]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80011ca:	eb08 0386 	add.w	r3, r8, r6, lsl #2

  if (epr & EPR_CTR_TX) {
 80011ce:	f019 0f80 	tst.w	r9, #128	; 0x80
 * @notapi
 */
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
  size_t n;
  uint32_t epr = STM32_USB->EPR[ep];
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80011d2:	685f      	ldr	r7, [r3, #4]

  if (epr & EPR_CTR_TX) {
 80011d4:	d04b      	beq.n	800126e <Vector16C+0x10e>
    /* IN endpoint, transmission.*/
    USBInEndpointState *isp = epcp->in_state;
 80011d6:	f8d7 e014 	ldr.w	lr, [r7, #20]

    EPR_CLEAR_CTR_TX(ep);
 80011da:	6822      	ldr	r2, [r4, #0]

    isp->txcnt += isp->txlast;
 80011dc:	f8de 100c 	ldr.w	r1, [lr, #12]
    n = isp->txsize - isp->txcnt;
 80011e0:	e89e 0009 	ldmia.w	lr, {r0, r3}

  if (epr & EPR_CTR_TX) {
    /* IN endpoint, transmission.*/
    USBInEndpointState *isp = epcp->in_state;

    EPR_CLEAR_CTR_TX(ep);
 80011e4:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
 80011e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

    isp->txcnt += isp->txlast;
 80011ec:	440b      	add	r3, r1

  if (epr & EPR_CTR_TX) {
    /* IN endpoint, transmission.*/
    USBInEndpointState *isp = epcp->in_state;

    EPR_CLEAR_CTR_TX(ep);
 80011ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f2:	6022      	str	r2, [r4, #0]

    isp->txcnt += isp->txlast;
 80011f4:	f8ce 3004 	str.w	r3, [lr, #4]
    n = isp->txsize - isp->txcnt;
    if (n > 0) {
 80011f8:	1ac3      	subs	r3, r0, r3
 80011fa:	f000 80c3 	beq.w	8001384 <Vector16C+0x224>
      /* Transfer not completed, there are more packets to send.*/
      if (n > epcp->in_maxsize)
 80011fe:	8a38      	ldrh	r0, [r7, #16]
        n = epcp->in_maxsize;

      /* Writes the packet from the defined buffer.*/
      isp->txbuf += isp->txlast;
 8001200:	f8de 2008 	ldr.w	r2, [lr, #8]
 8001204:	4298      	cmp	r0, r3
 8001206:	bf28      	it	cs
 8001208:	4618      	movcs	r0, r3
      isp->txlast = n;
 800120a:	f8ce 000c 	str.w	r0, [lr, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800120e:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8001212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001216:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800121a:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 800121e:	eb0b 0c03 	add.w	ip, fp, r3
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001222:	f85b 3003 	ldr.w	r3, [fp, r3]
 8001226:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800122a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
      /* Transfer not completed, there are more packets to send.*/
      if (n > epcp->in_maxsize)
        n = epcp->in_maxsize;

      /* Writes the packet from the defined buffer.*/
      isp->txbuf += isp->txlast;
 800122e:	440a      	add	r2, r1
 8001230:	f8ce 2008 	str.w	r2, [lr, #8]
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001234:	005b      	lsls	r3, r3, #1
  if (EPR_EP_TYPE_IS_ISO(epr) && (epr & EPR_DTOG_TX))
    udp->TXCOUNT1 = (stm32_usb_pma_t)n;
  else
    udp->TXCOUNT0 = (stm32_usb_pma_t)n;
#else
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001236:	f8cc 0004 	str.w	r0, [ip, #4]
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
 800123a:	b160      	cbz	r0, 8001256 <Vector16C+0xf6>
 800123c:	3801      	subs	r0, #1
 800123e:	0840      	lsrs	r0, r0, #1
 8001240:	3304      	adds	r3, #4
 8001242:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001246:	e000      	b.n	800124a <Vector16C+0xea>
 8001248:	3304      	adds	r3, #4
    uint32_t w;

    w  = *buf++;
    w |= *buf++ << 8;
 800124a:	f832 1b02 	ldrh.w	r1, [r2], #2
    *pmap++ = (stm32_usb_pma_t)w;
 800124e:	f843 1c04 	str.w	r1, [r3, #-4]
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
 8001252:	4298      	cmp	r0, r3
 8001254:	d1f8      	bne.n	8001248 <Vector16C+0xe8>
      isp->txbuf += isp->txlast;
      isp->txlast = n;
      usb_packet_write_from_buffer(ep, isp->txbuf, n);

      /* Starting IN operation.*/
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800125c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001260:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6023      	str	r3, [r4, #0]
    else {
      /* Transfer completed, invokes the callback.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if (epr & EPR_CTR_RX) {
 800126e:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8001272:	d06b      	beq.n	800134c <Vector16C+0x1ec>
    /* OUT endpoint, receive.*/

    EPR_CLEAR_CTR_RX(ep);
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 800127a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800127e:	f043 0380 	orr.w	r3, r3, #128	; 0x80

    if (epr & EPR_SETUP) {
 8001282:	f419 6f00 	tst.w	r9, #2048	; 0x800
    }
  }
  if (epr & EPR_CTR_RX) {
    /* OUT endpoint, receive.*/

    EPR_CLEAR_CTR_RX(ep);
 8001286:	6023      	str	r3, [r4, #0]

    if (epr & EPR_SETUP) {
 8001288:	f040 808c 	bne.w	80013a4 <Vector16C+0x244>
 *
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800128c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      /* Setup packets handling, setup packets are handled using a
         specific callback.*/
      _usb_isr_invoke_setup_cb(usbp, ep);
    }
    else {
      USBOutEndpointState *osp = epcp->out_state;
 8001290:	f8d7 c018 	ldr.w	ip, [r7, #24]
 *
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8001294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001298:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800129c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    }
    else {
      USBOutEndpointState *osp = epcp->out_state;

      /* Reads the packet into the defined buffer.*/
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 80012a0:	f8dc b008 	ldr.w	fp, [ip, #8]
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80012a4:	689a      	ldr	r2, [r3, #8]
  if (EPR_EP_TYPE_IS_ISO(epr) && !(epr & EPR_DTOG_RX))
    n = (size_t)udp->RXCOUNT1 & RXCOUNT_COUNT_MASK;
  else
    n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
#else
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	9301      	str	r3, [sp, #4]
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80012aa:	f102 5e00 	add.w	lr, r2, #536870912	; 0x20000000
  if (EPR_EP_TYPE_IS_ISO(epr) && !(epr & EPR_DTOG_RX))
    n = (size_t)udp->RXCOUNT1 & RXCOUNT_COUNT_MASK;
  else
    n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
#else
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80012ae:	f3c3 0909 	ubfx	r9, r3, #0, #10
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80012b2:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 80012b6:	f1b9 0f01 	cmp.w	r9, #1
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80012ba:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 80012be:	d979      	bls.n	80013b4 <Vector16C+0x254>
 80012c0:	f10b 0202 	add.w	r2, fp, #2
 80012c4:	4649      	mov	r1, r9
 80012c6:	4670      	mov	r0, lr
    uint32_t w = *pmap++;
 80012c8:	f850 3b04 	ldr.w	r3, [r0], #4
    *buf++ = (uint8_t)w;
 80012cc:	f802 3c02 	strb.w	r3, [r2, #-2]
    *buf++ = (uint8_t)(w >> 8);
    i -= 2;
 80012d0:	3902      	subs	r1, #2
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
    uint32_t w = *pmap++;
    *buf++ = (uint8_t)w;
    *buf++ = (uint8_t)(w >> 8);
 80012d2:	0a1b      	lsrs	r3, r3, #8
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 80012d4:	2901      	cmp	r1, #1
    uint32_t w = *pmap++;
    *buf++ = (uint8_t)w;
    *buf++ = (uint8_t)(w >> 8);
 80012d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80012da:	f102 0202 	add.w	r2, r2, #2
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 80012de:	d8f3      	bhi.n	80012c8 <Vector16C+0x168>
 80012e0:	f1a9 0302 	sub.w	r3, r9, #2
 80012e4:	085b      	lsrs	r3, r3, #1
 80012e6:	9a01      	ldr	r2, [sp, #4]
 80012e8:	3301      	adds	r3, #1
 80012ea:	f002 0201 	and.w	r2, r2, #1
 80012ee:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 80012f2:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
    *buf++ = (uint8_t)w;
    *buf++ = (uint8_t)(w >> 8);
    i -= 2;
  }

  if (i >= 1) {
 80012f6:	b11a      	cbz	r2, 8001300 <Vector16C+0x1a0>
    *buf = (uint8_t)*pmap;
 80012f8:	f8de 3000 	ldr.w	r3, [lr]
 80012fc:	f88b 3000 	strb.w	r3, [fp]
      osp->rxbuf += n;

      /* Transaction data updated.*/
      osp->rxcnt  += n;
      osp->rxsize -= n;
      osp->rxpkts -= 1;
 8001300:	f8bc 000c 	ldrh.w	r0, [ip, #12]

      /* The transaction is completed if the specified number of packets
         has been received or the current packet is a short packet.*/
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8001304:	8a7f      	ldrh	r7, [r7, #18]
    else {
      USBOutEndpointState *osp = epcp->out_state;

      /* Reads the packet into the defined buffer.*/
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
      osp->rxbuf += n;
 8001306:	f8dc 3008 	ldr.w	r3, [ip, #8]

      /* Transaction data updated.*/
      osp->rxcnt  += n;
 800130a:	f8dc 1004 	ldr.w	r1, [ip, #4]
      osp->rxsize -= n;
 800130e:	f8dc 2000 	ldr.w	r2, [ip]
      osp->rxpkts -= 1;
 8001312:	3801      	subs	r0, #1
 8001314:	b280      	uxth	r0, r0
    else {
      USBOutEndpointState *osp = epcp->out_state;

      /* Reads the packet into the defined buffer.*/
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
      osp->rxbuf += n;
 8001316:	444b      	add	r3, r9

      /* Transaction data updated.*/
      osp->rxcnt  += n;
 8001318:	4449      	add	r1, r9
      osp->rxsize -= n;
 800131a:	ebc9 0202 	rsb	r2, r9, r2
      osp->rxpkts -= 1;

      /* The transaction is completed if the specified number of packets
         has been received or the current packet is a short packet.*/
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800131e:	454f      	cmp	r7, r9
      osp->rxbuf += n;

      /* Transaction data updated.*/
      osp->rxcnt  += n;
      osp->rxsize -= n;
      osp->rxpkts -= 1;
 8001320:	f8ac 000c 	strh.w	r0, [ip, #12]
    else {
      USBOutEndpointState *osp = epcp->out_state;

      /* Reads the packet into the defined buffer.*/
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
      osp->rxbuf += n;
 8001324:	f8cc 3008 	str.w	r3, [ip, #8]

      /* Transaction data updated.*/
      osp->rxcnt  += n;
 8001328:	f8cc 1004 	str.w	r1, [ip, #4]
      osp->rxsize -= n;
 800132c:	f8cc 2000 	str.w	r2, [ip]
      osp->rxpkts -= 1;

      /* The transaction is completed if the specified number of packets
         has been received or the current packet is a short packet.*/
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8001330:	d816      	bhi.n	8001360 <Vector16C+0x200>
 8001332:	b1a8      	cbz	r0, 8001360 <Vector16C+0x200>
        /* Transfer complete, invokes the callback.*/
        _usb_isr_invoke_out_cb(usbp, ep);
      }
      else {
        /* Transfer not complete, there are more packets to receive.*/
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800133a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800133e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134a:	6023      	str	r3, [r4, #0]
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
    istr = STM32_USB->ISTR;
 800134c:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8001350:	042b      	lsls	r3, r5, #16
 8001352:	f53f af30 	bmi.w	80011b6 <Vector16C+0x56>
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
}
 8001356:	b003      	add	sp, #12
 8001358:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (istr & ISTR_CTR) {
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
 800135c:	f7ff bb40 	b.w	80009e0 <_port_irq_epilogue>

      /* The transaction is completed if the specified number of packets
         has been received or the current packet is a short packet.*/
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
        /* Transfer complete, invokes the callback.*/
        _usb_isr_invoke_out_cb(usbp, ep);
 8001360:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8001364:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8001368:	6871      	ldr	r1, [r6, #4]
 800136a:	2301      	movs	r3, #1
 800136c:	40ab      	lsls	r3, r5
 800136e:	68cc      	ldr	r4, [r1, #12]
 8001370:	ea22 0303 	bic.w	r3, r2, r3
 8001374:	f8a8 300a 	strh.w	r3, [r8, #10]
 8001378:	2c00      	cmp	r4, #0
 800137a:	d0e7      	beq.n	800134c <Vector16C+0x1ec>
 800137c:	4629      	mov	r1, r5
 800137e:	481d      	ldr	r0, [pc, #116]	; (80013f4 <Vector16C+0x294>)
 8001380:	47a0      	blx	r4
 8001382:	e7e3      	b.n	800134c <Vector16C+0x1ec>
      /* Starting IN operation.*/
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
    }
    else {
      /* Transfer completed, invokes the callback.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <Vector16C+0x294>)
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	891b      	ldrh	r3, [r3, #8]
 800138a:	2101      	movs	r1, #1
 800138c:	40a9      	lsls	r1, r5
 800138e:	ea23 0301 	bic.w	r3, r3, r1
 8001392:	4918      	ldr	r1, [pc, #96]	; (80013f4 <Vector16C+0x294>)
 8001394:	810b      	strh	r3, [r1, #8]
 8001396:	2a00      	cmp	r2, #0
 8001398:	f43f af69 	beq.w	800126e <Vector16C+0x10e>
 800139c:	4629      	mov	r1, r5
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <Vector16C+0x294>)
 80013a0:	4790      	blx	r2
 80013a2:	e764      	b.n	800126e <Vector16C+0x10e>
    EPR_CLEAR_CTR_RX(ep);

    if (epr & EPR_SETUP) {
      /* Setup packets handling, setup packets are handled using a
         specific callback.*/
      _usb_isr_invoke_setup_cb(usbp, ep);
 80013a4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80013a8:	4629      	mov	r1, r5
 80013aa:	6873      	ldr	r3, [r6, #4]
 80013ac:	4811      	ldr	r0, [pc, #68]	; (80013f4 <Vector16C+0x294>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4798      	blx	r3
 80013b2:	e7cb      	b.n	800134c <Vector16C+0x1ec>
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2) {
 80013b4:	464a      	mov	r2, r9
 80013b6:	e79e      	b.n	80012f6 <Vector16C+0x196>
 */
void _usb_suspend(USBDriver *usbp) {
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
 80013b8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80013f4 <Vector16C+0x294>
    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <Vector16C+0x290>)
  usbp->state       = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80013be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80013c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c4:	680c      	ldr	r4, [r1, #0]
 */
void _usb_suspend(USBDriver *usbp) {
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
 80013c6:	f898 0000 	ldrb.w	r0, [r8]
 80013ca:	f042 0208 	orr.w	r2, r2, #8
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 80013ce:	f46f 6600 	mvn.w	r6, #2048	; 0x800
  usbp->state       = USB_SUSPENDED;
 80013d2:	2105      	movs	r1, #5
    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 80013d6:	645e      	str	r6, [r3, #68]	; 0x44
 */
void _usb_suspend(USBDriver *usbp) {
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
 80013d8:	f888 0080 	strb.w	r0, [r8, #128]	; 0x80
  usbp->state       = USB_SUSPENDED;
 80013dc:	f888 1000 	strb.w	r1, [r8]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80013e0:	2c00      	cmp	r4, #0
 80013e2:	f43f aec8 	beq.w	8001176 <Vector16C+0x16>
 80013e6:	4640      	mov	r0, r8
 80013e8:	2104      	movs	r1, #4
 80013ea:	47a0      	blx	r4
 80013ec:	e6c3      	b.n	8001176 <Vector16C+0x16>
 80013ee:	bf00      	nop
 80013f0:	40005c00 	.word	0x40005c00
 80013f4:	20000a30 	.word	0x20000a30
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 80013f8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80014e8 <Vector16C+0x388>

  /* Resetting internal state.*/
  usbp->status        = 0;
 80013fc:	2200      	movs	r2, #0

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    STM32_USB->ISTR = ~ISTR_RESET;
 80013fe:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8001402:	2102      	movs	r1, #2
 8001404:	6458      	str	r0, [r3, #68]	; 0x44
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 8001406:	4610      	mov	r0, r2

  /* State transition.*/
  usbp->state         = USB_READY;

  /* Resetting internal state.*/
  usbp->status        = 0;
 8001408:	f8a8 207c 	strh.w	r2, [r8, #124]	; 0x7c
  usbp->address       = 0;
 800140c:	f888 207e 	strb.w	r2, [r8, #126]	; 0x7e
  usbp->configuration = 0;
 8001410:	f888 207f 	strb.w	r2, [r8, #127]	; 0x7f
  usbp->transmitting  = 0;
 8001414:	f8a8 2008 	strh.w	r2, [r8, #8]
  usbp->receiving     = 0;
 8001418:	f8a8 200a 	strh.w	r2, [r8, #10]
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 800141c:	f888 1000 	strb.w	r1, [r8]
 8001420:	f108 0308 	add.w	r3, r8, #8
 8001424:	f108 0228 	add.w	r2, r8, #40	; 0x28
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 8001428:	f843 0f04 	str.w	r0, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 800142c:	429a      	cmp	r2, r3
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 800142e:	f04f 0100 	mov.w	r1, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001432:	d1f9      	bne.n	8001428 <Vector16C+0x2c8>
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001434:	f8d8 0004 	ldr.w	r0, [r8, #4]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = BTABLE_ADDR;
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <Vector16C+0x380>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 800143a:	68c3      	ldr	r3, [r0, #12]
#endif
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800143c:	f888 1064 	strb.w	r1, [r8, #100]	; 0x64
    cntr |= CNTR_SOFM;
 8001440:	428b      	cmp	r3, r1
 8001442:	bf0c      	ite	eq
 8001444:	f44f 441c 	moveq.w	r4, #39936	; 0x9c00
 8001448:	f44f 441e 	movne.w	r4, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = BTABLE_ADDR;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 800144c:	2680      	movs	r6, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800144e:	2340      	movs	r3, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = BTABLE_ADDR;
 8001450:	6511      	str	r1, [r2, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8001452:	6451      	str	r1, [r2, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8001454:	64d6      	str	r6, [r2, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 8001456:	6414      	str	r4, [r2, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8001458:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
    break;
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  dp = USB_GET_DESCRIPTOR(ep);
 800145c:	6d13      	ldr	r3, [r2, #80]	; 0x50

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 800145e:	4c21      	ldr	r4, [pc, #132]	; (80014e4 <Vector16C+0x384>)
 8001460:	f8c8 400c 	str.w	r4, [r8, #12]
    break;
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  dp = USB_GET_DESCRIPTOR(ep);
 8001464:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001468:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800146c:	6804      	ldr	r4, [r0, #0]

  /* IN endpoint handling.*/
  if (epcp->in_state != NULL) {
    dp->TXCOUNT0 = 0;
 800146e:	6059      	str	r1, [r3, #4]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8001470:	f8d8 0084 	ldr.w	r0, [r8, #132]	; 0x84
    if (epcp->out_maxsize > 62)
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
                0x8000;
    else
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
    dp->RXCOUNT0 = nblocks;
 8001474:	f44f 4608 	mov.w	r6, #34816	; 0x8800
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += (size + 1) & ~1;
 8001478:	f100 0740 	add.w	r7, r0, #64	; 0x40
 800147c:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
  dp = USB_GET_DESCRIPTOR(ep);

  /* IN endpoint handling.*/
  if (epcp->in_state != NULL) {
    dp->TXCOUNT0 = 0;
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8001480:	6018      	str	r0, [r3, #0]
    if (epcp->out_maxsize > 62)
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
                0x8000;
    else
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
    dp->RXCOUNT0 = nblocks;
 8001482:	60de      	str	r6, [r3, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8001484:	f8d8 0084 	ldr.w	r0, [r8, #132]	; 0x84
    epr |= EPR_STAT_RX_NAK;
#endif
  }

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8001488:	f248 2680 	movw	r6, #33408	; 0x8280
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += (size + 1) & ~1;
 800148c:	f100 0740 	add.w	r7, r0, #64	; 0x40
 8001490:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
                0x8000;
    else
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
    dp->RXCOUNT0 = nblocks;
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8001494:	6098      	str	r0, [r3, #8]
    epr |= EPR_STAT_RX_NAK;
#endif
  }

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8001496:	6016      	str	r6, [r2, #0]
  EPR_TOGGLE(ep, epr);
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800149e:	f083 0320 	eor.w	r3, r3, #32
 80014a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	f43f ae5f 	beq.w	8001170 <Vector16C+0x10>
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <Vector16C+0x388>)
 80014b4:	47a0      	blx	r4
 80014b6:	e65b      	b.n	8001170 <Vector16C+0x10>
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;
 80014b8:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80014e8 <Vector16C+0x388>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80014bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80014be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;
 80014c2:	f898 1080 	ldrb.w	r1, [r8, #128]	; 0x80

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80014c6:	6804      	ldr	r4, [r0, #0]
 80014c8:	f022 0208 	bic.w	r2, r2, #8
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;
 80014ce:	f888 1000 	strb.w	r1, [r8]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80014d2:	2c00      	cmp	r4, #0
 80014d4:	f43f ae56 	beq.w	8001184 <Vector16C+0x24>
 80014d8:	4640      	mov	r0, r8
 80014da:	2105      	movs	r1, #5
 80014dc:	47a0      	blx	r4
 80014de:	e651      	b.n	8001184 <Vector16C+0x24>
 80014e0:	40005c00 	.word	0x40005c00
 80014e4:	08002c40 	.word	0x08002c40
 80014e8:	20000a30 	.word	0x20000a30
 80014ec:	00000000 	.word	0x00000000

080014f0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 80014f0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80014f2:	4d17      	ldr	r5, [pc, #92]	; (8001550 <VectorB8+0x60>)
 80014f4:	69ab      	ldr	r3, [r5, #24]
 80014f6:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	4014      	ands	r4, r2
  pwmp->tim->SR = ~sr;
 80014fc:	b2e2      	uxtb	r2, r4
 80014fe:	43d2      	mvns	r2, r2
 8001500:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8001502:	07a3      	lsls	r3, r4, #30
 8001504:	d504      	bpl.n	8001510 <VectorB8+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8001506:	686b      	ldr	r3, [r5, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800150a:	b10b      	cbz	r3, 8001510 <VectorB8+0x20>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 800150c:	4628      	mov	r0, r5
 800150e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8001510:	0760      	lsls	r0, r4, #29
 8001512:	d504      	bpl.n	800151e <VectorB8+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8001514:	686b      	ldr	r3, [r5, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8001518:	b10b      	cbz	r3, 800151e <VectorB8+0x2e>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <VectorB8+0x60>)
 800151c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800151e:	0721      	lsls	r1, r4, #28
 8001520:	d504      	bpl.n	800152c <VectorB8+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8001522:	686b      	ldr	r3, [r5, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8001526:	b10b      	cbz	r3, 800152c <VectorB8+0x3c>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <VectorB8+0x60>)
 800152a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800152c:	06e2      	lsls	r2, r4, #27
 800152e:	d504      	bpl.n	800153a <VectorB8+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8001530:	686b      	ldr	r3, [r5, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8001534:	b10b      	cbz	r3, 800153a <VectorB8+0x4a>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <VectorB8+0x60>)
 8001538:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800153a:	07e3      	lsls	r3, r4, #31
 800153c:	d504      	bpl.n	8001548 <VectorB8+0x58>
 800153e:	686b      	ldr	r3, [r5, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	b10b      	cbz	r3, 8001548 <VectorB8+0x58>
    pwmp->config->callback(pwmp);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <VectorB8+0x60>)
 8001546:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD4);

  OSAL_IRQ_EPILOGUE();
}
 8001548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD4);

  OSAL_IRQ_EPILOGUE();
 800154c:	f7ff ba48 	b.w	80009e0 <_port_irq_epilogue>
 8001550:	20000ab8 	.word	0x20000ab8
	...

08001560 <VectorA4>:
/**
 * @brief   TIM1 compare interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8001560:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 8001562:	4d25      	ldr	r5, [pc, #148]	; (80015f8 <VectorA4+0x98>)
 8001564:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001566:	6869      	ldr	r1, [r5, #4]
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 8001568:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800156a:	68da      	ldr	r2, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800156c:	7d08      	ldrb	r0, [r1, #20]
 800156e:	4014      	ands	r4, r2
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
 8001570:	b2e2      	uxtb	r2, r4
 8001572:	43d2      	mvns	r2, r2
 8001574:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001576:	b990      	cbnz	r0, 800159e <VectorA4+0x3e>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001578:	0760      	lsls	r0, r4, #29
 800157a:	d52f      	bpl.n	80015dc <VectorA4+0x7c>
      _icu_isr_invoke_width_cb(icup);
 800157c:	782b      	ldrb	r3, [r5, #0]
 800157e:	2b04      	cmp	r3, #4
 8001580:	d028      	beq.n	80015d4 <VectorA4+0x74>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001582:	07a1      	lsls	r1, r4, #30
 8001584:	d412      	bmi.n	80015ac <VectorA4+0x4c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8001586:	07e4      	lsls	r4, r4, #31
 8001588:	d505      	bpl.n	8001596 <VectorA4+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 800158a:	686b      	ldr	r3, [r5, #4]
 800158c:	481a      	ldr	r0, [pc, #104]	; (80015f8 <VectorA4+0x98>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4798      	blx	r3
 8001592:	2303      	movs	r3, #3
 8001594:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);

  OSAL_IRQ_EPILOGUE();
}
 8001596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);

  OSAL_IRQ_EPILOGUE();
 800159a:	f7ff ba21 	b.w	80009e0 <_port_irq_epilogue>
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800159e:	07a2      	lsls	r2, r4, #30
 80015a0:	d50b      	bpl.n	80015ba <VectorA4+0x5a>
      _icu_isr_invoke_width_cb(icup);
 80015a2:	782b      	ldrb	r3, [r5, #0]
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d004      	beq.n	80015b2 <VectorA4+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80015a8:	0763      	lsls	r3, r4, #29
 80015aa:	d5ec      	bpl.n	8001586 <VectorA4+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 80015ac:	2304      	movs	r3, #4
 80015ae:	702b      	strb	r3, [r5, #0]
 80015b0:	e7e9      	b.n	8001586 <VectorA4+0x26>
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 80015b2:	688b      	ldr	r3, [r1, #8]
 80015b4:	b1e3      	cbz	r3, 80015f0 <VectorA4+0x90>
 80015b6:	4628      	mov	r0, r5
 80015b8:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80015ba:	0763      	lsls	r3, r4, #29
 80015bc:	d5e3      	bpl.n	8001586 <VectorA4+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 80015be:	782b      	ldrb	r3, [r5, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <VectorA4+0x98>)
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d1f2      	bne.n	80015ac <VectorA4+0x4c>
 80015c6:	6851      	ldr	r1, [r2, #4]
 80015c8:	68cb      	ldr	r3, [r1, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ee      	beq.n	80015ac <VectorA4+0x4c>
 80015ce:	480a      	ldr	r0, [pc, #40]	; (80015f8 <VectorA4+0x98>)
 80015d0:	4798      	blx	r3
 80015d2:	e7eb      	b.n	80015ac <VectorA4+0x4c>
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 80015d4:	688b      	ldr	r3, [r1, #8]
 80015d6:	b143      	cbz	r3, 80015ea <VectorA4+0x8a>
 80015d8:	4628      	mov	r0, r5
 80015da:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80015dc:	07a1      	lsls	r1, r4, #30
 80015de:	d5d2      	bpl.n	8001586 <VectorA4+0x26>
      _icu_isr_invoke_period_cb(icup);
 80015e0:	782b      	ldrb	r3, [r5, #0]
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <VectorA4+0x98>)
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d1e1      	bne.n	80015ac <VectorA4+0x4c>
 80015e8:	e7ed      	b.n	80015c6 <VectorA4+0x66>
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80015ea:	07a0      	lsls	r0, r4, #30
 80015ec:	d4ec      	bmi.n	80015c8 <VectorA4+0x68>
 80015ee:	e7ca      	b.n	8001586 <VectorA4+0x26>
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80015f0:	0762      	lsls	r2, r4, #29
 80015f2:	d4e9      	bmi.n	80015c8 <VectorA4+0x68>
 80015f4:	e7c7      	b.n	8001586 <VectorA4+0x26>
 80015f6:	bf00      	nop
 80015f8:	20000b38 	.word	0x20000b38
 80015fc:	00000000 	.word	0x00000000

08001600 <VectorAC>:
 8001600:	f7ff bfae 	b.w	8001560 <VectorA4>
	...

08001610 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001614:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001618:	6933      	ldr	r3, [r6, #16]
 800161a:	079b      	lsls	r3, r3, #30
 800161c:	d403      	bmi.n	8001626 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800161e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001622:	f7ff b9dd 	b.w	80009e0 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8001626:	2500      	movs	r5, #0
 8001628:	6135      	str	r5, [r6, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800162a:	2720      	movs	r7, #32
 800162c:	f387 8811 	msr	BASEPRI, r7
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8001630:	4c1b      	ldr	r4, [pc, #108]	; (80016a0 <VectorB0+0x90>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001632:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8001634:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001636:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001638:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800163c:	1a88      	subs	r0, r1, r2
 800163e:	4570      	cmp	r0, lr
 8001640:	f104 081c 	add.w	r8, r4, #28
 8001644:	d319      	bcc.n	800167a <VectorB0+0x6a>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001646:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8001648:	f8d3 900c 	ldr.w	r9, [r3, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 800164c:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800164e:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8001650:	62a2      	str	r2, [r4, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001652:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8001656:	61e1      	str	r1, [r4, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8001658:	60dd      	str	r5, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800165a:	bf08      	it	eq
 800165c:	60f5      	streq	r5, [r6, #12]
 800165e:	f385 8811 	msr	BASEPRI, r5
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8001662:	6918      	ldr	r0, [r3, #16]
 8001664:	47c8      	blx	r9
 8001666:	f387 8811 	msr	BASEPRI, r7
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 800166a:	69e3      	ldr	r3, [r4, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800166c:	6a71      	ldr	r1, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800166e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001670:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001674:	1a88      	subs	r0, r1, r2
 8001676:	4586      	cmp	lr, r0
 8001678:	d9e5      	bls.n	8001646 <VectorB0+0x36>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800167a:	4543      	cmp	r3, r8
 800167c:	d008      	beq.n	8001690 <VectorB0+0x80>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800167e:	4472      	add	r2, lr
 8001680:	1a52      	subs	r2, r2, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001682:	2a01      	cmp	r2, #1
 8001684:	bf98      	it	ls
 8001686:	2202      	movls	r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  }
  port_timer_set_alarm(now + delta);
 800168c:	440a      	add	r2, r1
 800168e:	635a      	str	r2, [r3, #52]	; 0x34
 8001690:	2300      	movs	r3, #0
 8001692:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8001696:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 800169a:	f7ff b9a1 	b.w	80009e0 <_port_irq_epilogue>
 800169e:	bf00      	nop
 80016a0:	20000c30 	.word	0x20000c30
	...

080016b0 <Vector130>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <Vector130+0x30>)
 80016b2:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <Vector130+0x34>)
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	0c09      	lsrs	r1, r1, #16
 80016ba:	f001 010e 	and.w	r1, r1, #14
 80016be:	4211      	tst	r1, r2
 80016c0:	d00b      	beq.n	80016da <Vector130+0x2a>
 80016c2:	4809      	ldr	r0, [pc, #36]	; (80016e8 <Vector130+0x38>)
 80016c4:	6d82      	ldr	r2, [r0, #88]	; 0x58
/**
 * @brief   DMA2 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80016c6:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 80016c8:	040c      	lsls	r4, r1, #16
 80016ca:	605c      	str	r4, [r3, #4]
 80016cc:	b10a      	cbz	r2, 80016d2 <Vector130+0x22>
 80016ce:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80016d0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80016d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);

  OSAL_IRQ_EPILOGUE();
 80016d6:	f7ff b983 	b.w	80009e0 <_port_irq_epilogue>
 80016da:	f7ff b981 	b.w	80009e0 <_port_irq_epilogue>
 80016de:	bf00      	nop
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020458 	.word	0x40020458
 80016e8:	20000b50 	.word	0x20000b50
 80016ec:	00000000 	.word	0x00000000

080016f0 <Vector12C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <Vector12C+0x30>)
 80016f2:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <Vector12C+0x34>)
 80016f4:	6819      	ldr	r1, [r3, #0]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	0b09      	lsrs	r1, r1, #12
 80016fa:	f001 010e 	and.w	r1, r1, #14
 80016fe:	4211      	tst	r1, r2
 8001700:	d00b      	beq.n	800171a <Vector12C+0x2a>
 8001702:	4809      	ldr	r0, [pc, #36]	; (8001728 <Vector12C+0x38>)
 8001704:	6d02      	ldr	r2, [r0, #80]	; 0x50
/**
 * @brief   DMA2 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8001706:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 8001708:	030c      	lsls	r4, r1, #12
 800170a:	605c      	str	r4, [r3, #4]
 800170c:	b10a      	cbz	r2, 8001712 <Vector12C+0x22>
 800170e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001710:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);

  OSAL_IRQ_EPILOGUE();
 8001716:	f7ff b963 	b.w	80009e0 <_port_irq_epilogue>
 800171a:	f7ff b961 	b.w	80009e0 <_port_irq_epilogue>
 800171e:	bf00      	nop
 8001720:	40020400 	.word	0x40020400
 8001724:	40020444 	.word	0x40020444
 8001728:	20000b50 	.word	0x20000b50
 800172c:	00000000 	.word	0x00000000

08001730 <Vector128>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <Vector128+0x30>)
 8001732:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <Vector128+0x34>)
 8001734:	6819      	ldr	r1, [r3, #0]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	0a09      	lsrs	r1, r1, #8
 800173a:	f001 010e 	and.w	r1, r1, #14
 800173e:	4211      	tst	r1, r2
 8001740:	d00b      	beq.n	800175a <Vector128+0x2a>
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <Vector128+0x38>)
 8001744:	6c82      	ldr	r2, [r0, #72]	; 0x48
/**
 * @brief   DMA2 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8001746:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 8001748:	020c      	lsls	r4, r1, #8
 800174a:	605c      	str	r4, [r3, #4]
 800174c:	b10a      	cbz	r2, 8001752 <Vector128+0x22>
 800174e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001750:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);

  OSAL_IRQ_EPILOGUE();
 8001756:	f7ff b943 	b.w	80009e0 <_port_irq_epilogue>
 800175a:	f7ff b941 	b.w	80009e0 <_port_irq_epilogue>
 800175e:	bf00      	nop
 8001760:	40020400 	.word	0x40020400
 8001764:	40020430 	.word	0x40020430
 8001768:	20000b50 	.word	0x20000b50
 800176c:	00000000 	.word	0x00000000

08001770 <Vector124>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <Vector124+0x30>)
 8001772:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <Vector124+0x34>)
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	0909      	lsrs	r1, r1, #4
 800177a:	f001 010e 	and.w	r1, r1, #14
 800177e:	4211      	tst	r1, r2
 8001780:	d00b      	beq.n	800179a <Vector124+0x2a>
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <Vector124+0x38>)
 8001784:	6c02      	ldr	r2, [r0, #64]	; 0x40
/**
 * @brief   DMA2 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8001786:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 8001788:	010c      	lsls	r4, r1, #4
 800178a:	605c      	str	r4, [r3, #4]
 800178c:	b10a      	cbz	r2, 8001792 <Vector124+0x22>
 800178e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001790:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);

  OSAL_IRQ_EPILOGUE();
 8001796:	f7ff b923 	b.w	80009e0 <_port_irq_epilogue>
 800179a:	f7ff b921 	b.w	80009e0 <_port_irq_epilogue>
 800179e:	bf00      	nop
 80017a0:	40020400 	.word	0x40020400
 80017a4:	4002041c 	.word	0x4002041c
 80017a8:	20000b50 	.word	0x20000b50
 80017ac:	00000000 	.word	0x00000000

080017b0 <Vector120>:
/**
 * @brief   DMA2 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80017b0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <Vector120+0x28>)
 80017b4:	4a09      	ldr	r2, [pc, #36]	; (80017dc <Vector120+0x2c>)
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f001 010e 	and.w	r1, r1, #14
 80017be:	4211      	tst	r1, r2
 80017c0:	d005      	beq.n	80017ce <Vector120+0x1e>
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <Vector120+0x30>)
 80017c4:	6059      	str	r1, [r3, #4]
 80017c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80017c8:	b10b      	cbz	r3, 80017ce <Vector120+0x1e>
 80017ca:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80017cc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80017ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);

  OSAL_IRQ_EPILOGUE();
 80017d2:	f7ff b905 	b.w	80009e0 <_port_irq_epilogue>
 80017d6:	bf00      	nop
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40020408 	.word	0x40020408
 80017e0:	20000b50 	.word	0x20000b50
	...

080017f0 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <Vector84+0x30>)
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <Vector84+0x34>)
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	0e09      	lsrs	r1, r1, #24
 80017fa:	f001 010e 	and.w	r1, r1, #14
 80017fe:	4211      	tst	r1, r2
 8001800:	d00b      	beq.n	800181a <Vector84+0x2a>
 8001802:	4809      	ldr	r0, [pc, #36]	; (8001828 <Vector84+0x38>)
 8001804:	6b02      	ldr	r2, [r0, #48]	; 0x30
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001806:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001808:	060c      	lsls	r4, r1, #24
 800180a:	605c      	str	r4, [r3, #4]
 800180c:	b10a      	cbz	r2, 8001812 <Vector84+0x22>
 800180e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001810:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 8001816:	f7ff b8e3 	b.w	80009e0 <_port_irq_epilogue>
 800181a:	f7ff b8e1 	b.w	80009e0 <_port_irq_epilogue>
 800181e:	bf00      	nop
 8001820:	40020000 	.word	0x40020000
 8001824:	40020080 	.word	0x40020080
 8001828:	20000b50 	.word	0x20000b50
 800182c:	00000000 	.word	0x00000000

08001830 <Vector80>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <Vector80+0x30>)
 8001832:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <Vector80+0x34>)
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	0d09      	lsrs	r1, r1, #20
 800183a:	f001 010e 	and.w	r1, r1, #14
 800183e:	4211      	tst	r1, r2
 8001840:	d00b      	beq.n	800185a <Vector80+0x2a>
 8001842:	4809      	ldr	r0, [pc, #36]	; (8001868 <Vector80+0x38>)
 8001844:	6a82      	ldr	r2, [r0, #40]	; 0x28
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001846:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001848:	050c      	lsls	r4, r1, #20
 800184a:	605c      	str	r4, [r3, #4]
 800184c:	b10a      	cbz	r2, 8001852 <Vector80+0x22>
 800184e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001850:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 8001856:	f7ff b8c3 	b.w	80009e0 <_port_irq_epilogue>
 800185a:	f7ff b8c1 	b.w	80009e0 <_port_irq_epilogue>
 800185e:	bf00      	nop
 8001860:	40020000 	.word	0x40020000
 8001864:	4002006c 	.word	0x4002006c
 8001868:	20000b50 	.word	0x20000b50
 800186c:	00000000 	.word	0x00000000

08001870 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8001874:	4d61      	ldr	r5, [pc, #388]	; (80019fc <VectorD4+0x18c>)
 8001876:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint32_t cr1 = u->CR1;
 8001878:	6837      	ldr	r7, [r6, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 800187a:	69f4      	ldr	r4, [r6, #28]
  u->ICR = isr;
 800187c:	6234      	str	r4, [r6, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 800187e:	0722      	lsls	r2, r4, #28
 8001880:	d153      	bne.n	800192a <VectorD4+0xba>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 8001882:	05e3      	lsls	r3, r4, #23
 8001884:	d446      	bmi.n	8001914 <VectorD4+0xa4>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 8001886:	06a0      	lsls	r0, r4, #26
 8001888:	d418      	bmi.n	80018bc <VectorD4+0x4c>
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 800188a:	0639      	lsls	r1, r7, #24
 800188c:	d501      	bpl.n	8001892 <VectorD4+0x22>
 800188e:	0622      	lsls	r2, r4, #24
 8001890:	d465      	bmi.n	800195e <VectorD4+0xee>
      u->TDR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 8001892:	0663      	lsls	r3, r4, #25
 8001894:	d50e      	bpl.n	80018b4 <VectorD4+0x44>
 8001896:	2320      	movs	r3, #32
 8001898:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800189c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800189e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80018a0:	4956      	ldr	r1, [pc, #344]	; (80019fc <VectorD4+0x18c>)
 80018a2:	429a      	cmp	r2, r3
 80018a4:	f000 8089 	beq.w	80019ba <VectorD4+0x14a>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80018a8:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 80018ac:	6037      	str	r7, [r6, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 80018b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 80018b8:	f7ff b892 	b.w	80009e0 <_port_irq_epilogue>
 80018bc:	2320      	movs	r3, #32
 80018be:	f383 8811 	msr	BASEPRI, r3
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
 80018c2:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80018c4:	696b      	ldr	r3, [r5, #20]
 80018c6:	fa5f f882 	uxtb.w	r8, r2
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d07d      	beq.n	80019ca <VectorD4+0x15a>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80018ce:	6a2b      	ldr	r3, [r5, #32]
 80018d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80018d2:	494a      	ldr	r1, [pc, #296]	; (80019fc <VectorD4+0x18c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d07c      	beq.n	80019d2 <VectorD4+0x162>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80018d8:	696a      	ldr	r2, [r5, #20]
 80018da:	4948      	ldr	r1, [pc, #288]	; (80019fc <VectorD4+0x18c>)
 80018dc:	3201      	adds	r2, #1
 80018de:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	622a      	str	r2, [r5, #32]
 80018e4:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
 80018e8:	6a2a      	ldr	r2, [r5, #32]
 80018ea:	69eb      	ldr	r3, [r5, #28]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d261      	bcs.n	80019b4 <VectorD4+0x144>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80018f0:	4942      	ldr	r1, [pc, #264]	; (80019fc <VectorD4+0x18c>)
 80018f2:	68eb      	ldr	r3, [r5, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80018f4:	f101 020c 	add.w	r2, r1, #12
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d007      	beq.n	800190c <VectorD4+0x9c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	60c8      	str	r0, [r1, #12]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001900:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001902:	6042      	str	r2, [r0, #4]
  (void) chSchReadyI(tp);
 8001904:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001906:	6219      	str	r1, [r3, #32]
  (void) chSchReadyI(tp);
 8001908:	f7ff fb6a 	bl	8000fe0 <chSchReadyI>
 800190c:	2300      	movs	r3, #0
 800190e:	f383 8811 	msr	BASEPRI, r3
 8001912:	e7ba      	b.n	800188a <VectorD4+0x1a>
 8001914:	2320      	movs	r3, #32
 8001916:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800191a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800191e:	f001 f81f 	bl	8002960 <chEvtBroadcastFlagsI.constprop.43>
 8001922:	2300      	movs	r3, #0
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	e7ad      	b.n	8001886 <VectorD4+0x16>
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  eventflags_t sts = 0;

  if (isr & USART_ISR_ORE)
    sts |= SD_OVERRUN_ERROR;
 800192a:	f014 0f08 	tst.w	r4, #8
 800192e:	bf0c      	ite	eq
 8001930:	2000      	moveq	r0, #0
 8001932:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
 8001934:	07e3      	lsls	r3, r4, #31
    sts |= SD_PARITY_ERROR;
 8001936:	bf48      	it	mi
 8001938:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
 800193c:	07a1      	lsls	r1, r4, #30
    sts |= SD_FRAMING_ERROR;
 800193e:	bf48      	it	mi
 8001940:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
 8001944:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
 8001946:	bf48      	it	mi
 8001948:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 800194c:	2320      	movs	r3, #32
 800194e:	f383 8811 	msr	BASEPRI, r3
 8001952:	f001 f805 	bl	8002960 <chEvtBroadcastFlagsI.constprop.43>
 8001956:	2300      	movs	r3, #0
 8001958:	f383 8811 	msr	BASEPRI, r3
 800195c:	e791      	b.n	8001882 <VectorD4+0x12>
 800195e:	2320      	movs	r3, #32
 8001960:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8001964:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001966:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001968:	4924      	ldr	r1, [pc, #144]	; (80019fc <VectorD4+0x18c>)
 800196a:	429a      	cmp	r2, r3
 800196c:	d039      	beq.n	80019e2 <VectorD4+0x172>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800196e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001970:	4922      	ldr	r1, [pc, #136]	; (80019fc <VectorD4+0x18c>)
  b = *oqp->q_rdptr++;
 8001972:	1c58      	adds	r0, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8001974:	3201      	adds	r2, #1
 8001976:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8001978:	64a8      	str	r0, [r5, #72]	; 0x48
 800197a:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
 800197e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001980:	4298      	cmp	r0, r3
 8001982:	d301      	bcc.n	8001988 <VectorD4+0x118>
    oqp->q_rdptr = oqp->q_buffer;
 8001984:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001986:	648b      	str	r3, [r1, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001988:	491c      	ldr	r1, [pc, #112]	; (80019fc <VectorD4+0x18c>)
 800198a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800198c:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8001990:	4293      	cmp	r3, r2
 8001992:	d007      	beq.n	80019a4 <VectorD4+0x134>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	6308      	str	r0, [r1, #48]	; 0x30

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001998:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800199a:	6042      	str	r2, [r0, #4]
  (void) chSchReadyI(tp);
 800199c:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800199e:	6219      	str	r1, [r3, #32]
  (void) chSchReadyI(tp);
 80019a0:	f7ff fb1e 	bl	8000fe0 <chSchReadyI>
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->TDR = b;
 80019a4:	fa1f f888 	uxth.w	r8, r8
 80019a8:	f8a6 8028 	strh.w	r8, [r6, #40]	; 0x28
 80019ac:	2300      	movs	r3, #0
 80019ae:	f383 8811 	msr	BASEPRI, r3
 80019b2:	e76e      	b.n	8001892 <VectorD4+0x22>
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 80019b4:	698b      	ldr	r3, [r1, #24]
 80019b6:	620b      	str	r3, [r1, #32]
 80019b8:	e79a      	b.n	80018f0 <VectorD4+0x80>
 80019ba:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f43f af73 	beq.w	80018a8 <VectorD4+0x38>
 80019c2:	2010      	movs	r0, #16
 80019c4:	f000 ffcc 	bl	8002960 <chEvtBroadcastFlagsI.constprop.43>
 80019c8:	e76e      	b.n	80018a8 <VectorD4+0x38>
 80019ca:	2004      	movs	r0, #4
 80019cc:	f000 ffc8 	bl	8002960 <chEvtBroadcastFlagsI.constprop.43>
 80019d0:	e77d      	b.n	80018ce <VectorD4+0x5e>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80019d2:	694a      	ldr	r2, [r1, #20]
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	f43f af7f 	beq.w	80018d8 <VectorD4+0x68>
 80019da:	2080      	movs	r0, #128	; 0x80
 80019dc:	f000 ffc0 	bl	8002960 <chEvtBroadcastFlagsI.constprop.43>
 80019e0:	e794      	b.n	800190c <VectorD4+0x9c>
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80019e2:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80019e4:	2a00      	cmp	r2, #0
 80019e6:	d0c2      	beq.n	800196e <VectorD4+0xfe>
 80019e8:	2008      	movs	r0, #8
 80019ea:	f000 ffb9 	bl	8002960 <chEvtBroadcastFlagsI.constprop.43>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 80019ee:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
 80019f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f6:	6033      	str	r3, [r6, #0]
 80019f8:	e7d8      	b.n	80019ac <VectorD4+0x13c>
 80019fa:	bf00      	nop
 80019fc:	20000bb0 	.word	0x20000bb0

08001a00 <spi_lld_serve_rx_interrupt.lto_priv.52>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001a02:	070b      	lsls	r3, r1, #28
 8001a04:	d42b      	bmi.n	8001a5e <spi_lld_serve_rx_interrupt.lto_priv.52+0x5e>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8001a06:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmaStreamDisable(spip->dmarx);
 8001a08:	6a02      	ldr	r2, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8001a0a:	685d      	ldr	r5, [r3, #4]
 8001a0c:	681f      	ldr	r7, [r3, #0]
 8001a0e:	6829      	ldr	r1, [r5, #0]
  dmaStreamDisable(spip->dmarx);
 8001a10:	6856      	ldr	r6, [r2, #4]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8001a12:	f021 010f 	bic.w	r1, r1, #15
 8001a16:	6029      	str	r1, [r5, #0]
 8001a18:	7c19      	ldrb	r1, [r3, #16]
  dmaStreamDisable(spip->dmarx);

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8001a1a:	6845      	ldr	r5, [r0, #4]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8001a1c:	230e      	movs	r3, #14
 8001a1e:	fa03 f101 	lsl.w	r1, r3, r1
 8001a22:	6079      	str	r1, [r7, #4]
  dmaStreamDisable(spip->dmarx);
 8001a24:	6831      	ldr	r1, [r6, #0]
 8001a26:	6817      	ldr	r7, [r2, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8001a28:	682d      	ldr	r5, [r5, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8001a2a:	f021 010f 	bic.w	r1, r1, #15
 8001a2e:	6031      	str	r1, [r6, #0]
 8001a30:	7c12      	ldrb	r2, [r2, #16]
 8001a32:	4093      	lsls	r3, r2
 8001a34:	4604      	mov	r4, r0
 8001a36:	607b      	str	r3, [r7, #4]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8001a38:	b1b5      	cbz	r5, 8001a68 <spi_lld_serve_rx_interrupt.lto_priv.52+0x68>
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	7003      	strb	r3, [r0, #0]
 8001a3e:	47a8      	blx	r5
 8001a40:	7823      	ldrb	r3, [r4, #0]
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d010      	beq.n	8001a68 <spi_lld_serve_rx_interrupt.lto_priv.52+0x68>
 8001a46:	2320      	movs	r3, #32
 8001a48:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	f104 0008 	add.w	r0, r4, #8
 8001a52:	f7ff fadd 	bl	8001010 <chThdResumeI>
 8001a56:	2300      	movs	r3, #0
 8001a58:	f383 8811 	msr	BASEPRI, r3
 8001a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5e:	b672      	cpsid	i
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <spi_lld_serve_rx_interrupt.lto_priv.52+0x70>)
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <spi_lld_serve_rx_interrupt.lto_priv.52+0x74>)
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a66:	e7fe      	b.n	8001a66 <spi_lld_serve_rx_interrupt.lto_priv.52+0x66>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	7023      	strb	r3, [r4, #0]
 8001a6c:	e7eb      	b.n	8001a46 <spi_lld_serve_rx_interrupt.lto_priv.52+0x46>
 8001a6e:	bf00      	nop
 8001a70:	20000c30 	.word	0x20000c30
 8001a74:	08002c30 	.word	0x08002c30
	...

08001a80 <VectorC0>:

  OSAL_IRQ_EPILOGUE();
}

OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint32_t isr = I2CD1.i2c->ISR;
 8001a80:	4a24      	ldr	r2, [pc, #144]	; (8001b14 <VectorC0+0x94>)
  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}

OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8001a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isr = I2CD1.i2c->ISR;
 8001a84:	6b14      	ldr	r4, [r2, #48]	; 0x30
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001a86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c

  OSAL_IRQ_EPILOGUE();
}

OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint32_t isr = I2CD1.i2c->ISR;
 8001a88:	69a1      	ldr	r1, [r4, #24]
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001a8a:	685e      	ldr	r6, [r3, #4]
  dmaStreamDisable(i2cp->dmarx);
 8001a8c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001a8e:	681f      	ldr	r7, [r3, #0]
  uint32_t isr = I2CD1.i2c->ISR;

  OSAL_IRQ_PROLOGUE();

  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;
 8001a90:	f401 557c 	and.w	r5, r1, #16128	; 0x3f00
 8001a94:	61e5      	str	r5, [r4, #28]
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001a96:	6834      	ldr	r4, [r6, #0]
  dmaStreamDisable(i2cp->dmarx);
 8001a98:	6845      	ldr	r5, [r0, #4]
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001a9a:	f024 040f 	bic.w	r4, r4, #15
 8001a9e:	6034      	str	r4, [r6, #0]
 8001aa0:	7c1c      	ldrb	r4, [r3, #16]
  dmaStreamDisable(i2cp->dmarx);
 8001aa2:	6806      	ldr	r6, [r0, #0]
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {

#if STM32_I2C_USE_DMA == TRUE
  /* Clears DMA interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001aa4:	230e      	movs	r3, #14
 8001aa6:	fa03 f404 	lsl.w	r4, r3, r4
 8001aaa:	607c      	str	r4, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8001aac:	682c      	ldr	r4, [r5, #0]
 8001aae:	f024 040f 	bic.w	r4, r4, #15
 8001ab2:	602c      	str	r4, [r5, #0]
 8001ab4:	7c00      	ldrb	r0, [r0, #16]
 8001ab6:	4083      	lsls	r3, r0
 8001ab8:	6073      	str	r3, [r6, #4]
  /* Disabling RX and TX interrupts.*/
  i2cp->i2c->CR1 &= ~(I2C_CR1_TXIE | I2C_CR1_RXIE);
#endif

  if (isr & I2C_ISR_BERR)
    i2cp->errors |= I2C_BUS_ERROR;
 8001aba:	6893      	ldr	r3, [r2, #8]
#else
  /* Disabling RX and TX interrupts.*/
  i2cp->i2c->CR1 &= ~(I2C_CR1_TXIE | I2C_CR1_RXIE);
#endif

  if (isr & I2C_ISR_BERR)
 8001abc:	05ce      	lsls	r6, r1, #23
    i2cp->errors |= I2C_BUS_ERROR;
 8001abe:	bf44      	itt	mi
 8001ac0:	f043 0301 	orrmi.w	r3, r3, #1
 8001ac4:	6093      	strmi	r3, [r2, #8]

  if (isr & I2C_ISR_ARLO)
 8001ac6:	058d      	lsls	r5, r1, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8001ac8:	bf44      	itt	mi
 8001aca:	f043 0302 	orrmi.w	r3, r3, #2
 8001ace:	6093      	strmi	r3, [r2, #8]

  if (isr & I2C_ISR_OVR)
 8001ad0:	054c      	lsls	r4, r1, #21
 8001ad2:	d516      	bpl.n	8001b02 <VectorC0+0x82>
    i2cp->errors |= I2C_OVERRUN;
 8001ad4:	f043 0308 	orr.w	r3, r3, #8

  if (isr & I2C_ISR_TIMEOUT)
 8001ad8:	04c8      	lsls	r0, r1, #19

  if (isr & I2C_ISR_ARLO)
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (isr & I2C_ISR_OVR)
    i2cp->errors |= I2C_OVERRUN;
 8001ada:	6093      	str	r3, [r2, #8]

  if (isr & I2C_ISR_TIMEOUT)
 8001adc:	d502      	bpl.n	8001ae4 <VectorC0+0x64>
    i2cp->errors |= I2C_TIMEOUT;
 8001ade:	f043 0320 	orr.w	r3, r3, #32
 8001ae2:	6093      	str	r3, [r2, #8]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	f383 8811 	msr	BASEPRI, r3
 8001aea:	f06f 0101 	mvn.w	r1, #1
 8001aee:	480a      	ldr	r0, [pc, #40]	; (8001b18 <VectorC0+0x98>)
 8001af0:	f7ff fa8e 	bl	8001010 <chThdResumeI>
 8001af4:	2300      	movs	r3, #0
 8001af6:	f383 8811 	msr	BASEPRI, r3
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;

  i2c_lld_serve_error_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8001afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;

  i2c_lld_serve_error_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8001afe:	f7fe bf6f 	b.w	80009e0 <_port_irq_epilogue>
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (isr & I2C_ISR_OVR)
    i2cp->errors |= I2C_OVERRUN;

  if (isr & I2C_ISR_TIMEOUT)
 8001b02:	04c9      	lsls	r1, r1, #19
 8001b04:	d4eb      	bmi.n	8001ade <VectorC0+0x5e>
    i2cp->errors |= I2C_TIMEOUT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ec      	bne.n	8001ae4 <VectorC0+0x64>
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;

  i2c_lld_serve_error_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8001b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;

  i2c_lld_serve_error_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8001b0e:	f7fe bf67 	b.w	80009e0 <_port_irq_epilogue>
 8001b12:	bf00      	nop
 8001b14:	20000b04 	.word	0x20000b04
 8001b18:	20000b20 	.word	0x20000b20
 8001b1c:	00000000 	.word	0x00000000

08001b20 <VectorBC>:
  OSAL_IRQ_EPILOGUE();
}

#elif defined(STM32_I2C1_EVENT_HANDLER) && defined(STM32_I2C1_ERROR_HANDLER)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
  uint32_t isr = I2CD1.i2c->ISR;
 8001b20:	4869      	ldr	r0, [pc, #420]	; (8001cc8 <VectorBC+0x1a8>)
 8001b22:	6b02      	ldr	r2, [r0, #48]	; 0x30

  OSAL_IRQ_EPILOGUE();
}

#elif defined(STM32_I2C1_EVENT_HANDLER) && defined(STM32_I2C1_ERROR_HANDLER)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isr = I2CD1.i2c->ISR;
 8001b26:	6993      	ldr	r3, [r2, #24]

  OSAL_IRQ_PROLOGUE();

  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;
 8001b28:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
 8001b2c:	61d1      	str	r1, [r2, #28]
 */
static void i2c_lld_serve_interrupt(I2CDriver *i2cp, uint32_t isr) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
 8001b2e:	f013 0110 	ands.w	r1, r3, #16
 8001b32:	d14a      	bne.n	8001bca <VectorBC+0xaa>
    }
  }
#endif

  /* Partial transfer handling, restarting the transfer and returning.*/
  if ((isr & I2C_ISR_TCR) != 0U) {
 8001b34:	f013 0480 	ands.w	r4, r3, #128	; 0x80
 8001b38:	d021      	beq.n	8001b7e <VectorBC+0x5e>
    if (i2cp->state == I2C_ACTIVE_TX) {
 8001b3a:	7803      	ldrb	r3, [r0, #0]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	f000 80a9 	beq.w	8001c94 <VectorBC+0x174>
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
 8001b42:	6a83      	ldr	r3, [r0, #40]	; 0x28
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001b44:	6840      	ldr	r0, [r0, #4]
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
 8001b46:	685b      	ldr	r3, [r3, #4]
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001b48:	6880      	ldr	r0, [r0, #8]
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
 8001b4a:	685b      	ldr	r3, [r3, #4]
  if (n > 255U) {
 8001b4c:	2bff      	cmp	r3, #255	; 0xff
 8001b4e:	bf98      	it	ls
 8001b50:	041c      	lslls	r4, r3, #16
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001b52:	6853      	ldr	r3, [r2, #4]
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001b54:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001b58:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
  if (n > 255U) {
    n = 255U;
    reload = I2C_CR2_RELOAD;
 8001b60:	bf88      	it	hi
 8001b62:	f04f 7180 	movhi.w	r1, #16777216	; 0x1000000
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001b66:	ea43 0300 	orr.w	r3, r3, r0
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
  if (n > 255U) {
 8001b6a:	bf88      	it	hi
 8001b6c:	f44f 047f 	movhi.w	r4, #16711680	; 0xff0000
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001b70:	4319      	orrs	r1, r3
 8001b72:	4321      	orrs	r1, r4
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001b74:	6051      	str	r1, [r2, #4]
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8001b76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8001b7a:	f7fe bf31 	b.w	80009e0 <_port_irq_epilogue>
    }
    return;
  }

  /* The following condition is true if a transfer phase has been completed.*/
  if ((isr & I2C_ISR_TC) != 0U) {
 8001b7e:	065b      	lsls	r3, r3, #25
 8001b80:	d5f9      	bpl.n	8001b76 <VectorBC+0x56>
    if (i2cp->state == I2C_ACTIVE_TX) {
 8001b82:	7803      	ldrb	r3, [r0, #0]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d053      	beq.n	8001c30 <VectorBC+0x110>
    }
    else {
      /* End of the receive phase.*/
#if STM32_I2C_USE_DMA == TRUE
      /* Disabling RX DMA channel.*/
      dmaStreamDisable(i2cp->dmarx);
 8001b88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b8a:	6858      	ldr	r0, [r3, #4]
 8001b8c:	681c      	ldr	r4, [r3, #0]
 8001b8e:	6801      	ldr	r1, [r0, #0]
 8001b90:	f021 010f 	bic.w	r1, r1, #15
 8001b94:	6001      	str	r1, [r0, #0]
 8001b96:	7c19      	ldrb	r1, [r3, #16]
 8001b98:	230e      	movs	r3, #14
 8001b9a:	408b      	lsls	r3, r1
 8001b9c:	6063      	str	r3, [r4, #4]
#endif
    }

    /* Transaction finished sending the STOP.*/
    dp->CR2 |= I2C_CR2_STOP;
 8001b9e:	6853      	ldr	r3, [r2, #4]
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6053      	str	r3, [r2, #4]

    /* Make sure no more 'Transfer Complete' interrupts.*/
    dp->CR1 &= ~I2C_CR1_TCIE;
 8001ba6:	6813      	ldr	r3, [r2, #0]
 8001ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	2320      	movs	r3, #32
 8001bb0:	f383 8811 	msr	BASEPRI, r3
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4845      	ldr	r0, [pc, #276]	; (8001ccc <VectorBC+0x1ac>)
 8001bb8:	f7ff fa2a 	bl	8001010 <chThdResumeI>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f383 8811 	msr	BASEPRI, r3
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8001bc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8001bc6:	f7fe bf0b 	b.w	80009e0 <_port_irq_epilogue>

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
#if STM32_I2C_USE_DMA == TRUE
    /* Stops the associated DMA streams.*/
    dmaStreamDisable(i2cp->dmatx);
 8001bca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmarx);
 8001bcc:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
#if STM32_I2C_USE_DMA == TRUE
    /* Stops the associated DMA streams.*/
    dmaStreamDisable(i2cp->dmatx);
 8001bce:	685d      	ldr	r5, [r3, #4]
    dmaStreamDisable(i2cp->dmarx);
 8001bd0:	6866      	ldr	r6, [r4, #4]

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
#if STM32_I2C_USE_DMA == TRUE
    /* Stops the associated DMA streams.*/
    dmaStreamDisable(i2cp->dmatx);
 8001bd2:	6829      	ldr	r1, [r5, #0]
 8001bd4:	f8d3 e000 	ldr.w	lr, [r3]
    dmaStreamDisable(i2cp->dmarx);
 8001bd8:	6827      	ldr	r7, [r4, #0]

  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
#if STM32_I2C_USE_DMA == TRUE
    /* Stops the associated DMA streams.*/
    dmaStreamDisable(i2cp->dmatx);
 8001bda:	f021 010f 	bic.w	r1, r1, #15
 8001bde:	6029      	str	r1, [r5, #0]
 8001be0:	7c19      	ldrb	r1, [r3, #16]
 8001be2:	230e      	movs	r3, #14
 8001be4:	fa03 f101 	lsl.w	r1, r3, r1
 8001be8:	f8ce 1004 	str.w	r1, [lr, #4]
    dmaStreamDisable(i2cp->dmarx);
 8001bec:	6835      	ldr	r5, [r6, #0]
#endif

    /* Error flag.*/
    i2cp->errors |= I2C_ACK_FAILURE;
 8001bee:	6881      	ldr	r1, [r0, #8]
  /* Special case of a received NACK, the transfer is aborted.*/
  if ((isr & I2C_ISR_NACKF) != 0U) {
#if STM32_I2C_USE_DMA == TRUE
    /* Stops the associated DMA streams.*/
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
 8001bf0:	f025 050f 	bic.w	r5, r5, #15
 8001bf4:	6035      	str	r5, [r6, #0]
 8001bf6:	7c24      	ldrb	r4, [r4, #16]
 8001bf8:	40a3      	lsls	r3, r4
 8001bfa:	607b      	str	r3, [r7, #4]

    /* Error flag.*/
    i2cp->errors |= I2C_ACK_FAILURE;

    /* Transaction finished sending the STOP.*/
    dp->CR2 |= I2C_CR2_STOP;
 8001bfc:	6853      	ldr	r3, [r2, #4]
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
#endif

    /* Error flag.*/
    i2cp->errors |= I2C_ACK_FAILURE;
 8001bfe:	f041 0104 	orr.w	r1, r1, #4

    /* Transaction finished sending the STOP.*/
    dp->CR2 |= I2C_CR2_STOP;
 8001c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
#endif

    /* Error flag.*/
    i2cp->errors |= I2C_ACK_FAILURE;
 8001c06:	6081      	str	r1, [r0, #8]

    /* Transaction finished sending the STOP.*/
    dp->CR2 |= I2C_CR2_STOP;
 8001c08:	6053      	str	r3, [r2, #4]

    /* Make sure no more interrupts.*/
    dp->CR1 &= ~(I2C_CR1_TCIE | I2C_CR1_TXIE | I2C_CR1_RXIE);
 8001c0a:	6813      	ldr	r3, [r2, #0]
 8001c0c:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	2320      	movs	r3, #32
 8001c14:	f383 8811 	msr	BASEPRI, r3
 8001c18:	f06f 0101 	mvn.w	r1, #1
 8001c1c:	301c      	adds	r0, #28
 8001c1e:	f7ff f9f7 	bl	8001010 <chThdResumeI>
 8001c22:	2300      	movs	r3, #0
 8001c24:	f383 8811 	msr	BASEPRI, r3
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8001c28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8001c2c:	f7fe bed8 	b.w	80009e0 <_port_irq_epilogue>
    if (i2cp->state == I2C_ACTIVE_TX) {
      /* End of the transmit phase.*/

#if STM32_I2C_USE_DMA == TRUE
      /* Disabling TX DMA channel.*/
      dmaStreamDisable(i2cp->dmatx);
 8001c30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
#endif

      /* Starting receive phase if necessary.*/
      if (i2c_lld_get_rxbytes(i2cp) > 0U) {
 8001c32:	6a81      	ldr	r1, [r0, #40]	; 0x28
    if (i2cp->state == I2C_ACTIVE_TX) {
      /* End of the transmit phase.*/

#if STM32_I2C_USE_DMA == TRUE
      /* Disabling TX DMA channel.*/
      dmaStreamDisable(i2cp->dmatx);
 8001c34:	685e      	ldr	r6, [r3, #4]
#endif

      /* Starting receive phase if necessary.*/
      if (i2c_lld_get_rxbytes(i2cp) > 0U) {
 8001c36:	684d      	ldr	r5, [r1, #4]
    if (i2cp->state == I2C_ACTIVE_TX) {
      /* End of the transmit phase.*/

#if STM32_I2C_USE_DMA == TRUE
      /* Disabling TX DMA channel.*/
      dmaStreamDisable(i2cp->dmatx);
 8001c38:	6831      	ldr	r1, [r6, #0]
 8001c3a:	681f      	ldr	r7, [r3, #0]
 8001c3c:	f021 010f 	bic.w	r1, r1, #15
 8001c40:	6031      	str	r1, [r6, #0]
 8001c42:	7c19      	ldrb	r1, [r3, #16]
 8001c44:	230e      	movs	r3, #14
 8001c46:	408b      	lsls	r3, r1
 8001c48:	607b      	str	r3, [r7, #4]
#endif

      /* Starting receive phase if necessary.*/
      if (i2c_lld_get_rxbytes(i2cp) > 0U) {
 8001c4a:	686b      	ldr	r3, [r5, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0a6      	beq.n	8001b9e <VectorBC+0x7e>
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
 8001c50:	686b      	ldr	r3, [r5, #4]
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001c52:	6846      	ldr	r6, [r0, #4]
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
  if (n > 255U) {
 8001c54:	2bff      	cmp	r3, #255	; 0xff
 8001c56:	bf98      	it	ls
 8001c58:	0419      	lslls	r1, r3, #16
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001c5a:	6853      	ldr	r3, [r2, #4]
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001c5c:	68b6      	ldr	r6, [r6, #8]
 8001c5e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001c62:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	ea43 0306 	orr.w	r3, r3, r6

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
  if (n > 255U) {
    n = 255U;
    reload = I2C_CR2_RELOAD;
 8001c6e:	bf84      	itt	hi
 8001c70:	f04f 7480 	movhi.w	r4, #16777216	; 0x1000000
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_rxbytes(i2cp);
  if (n > 255U) {
 8001c74:	f44f 017f 	movhi.w	r1, #16711680	; 0xff0000
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001c78:	431c      	orrs	r4, r3
 8001c7a:	430c      	orrs	r4, r1
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001c7c:	6054      	str	r4, [r2, #4]
        /* Setting up the peripheral.*/
        i2c_lld_setup_rx_transfer(i2cp);

#if STM32_I2C_USE_DMA == TRUE
        /* Enabling RX DMA.*/
        dmaStreamEnable(i2cp->dmarx);
 8001c7e:	682b      	ldr	r3, [r5, #0]
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	602b      	str	r3, [r5, #0]
        /* RX interrupt enabled.*/
        dp->CR1 |= I2C_CR1_RXIE;
#endif

        /* Starts the read operation.*/
        dp->CR2 |= I2C_CR2_START;
 8001c86:	6853      	ldr	r3, [r2, #4]

        /* State change.*/
        i2cp->state = I2C_ACTIVE_RX;
 8001c88:	2104      	movs	r1, #4
        /* RX interrupt enabled.*/
        dp->CR1 |= I2C_CR1_RXIE;
#endif

        /* Starts the read operation.*/
        dp->CR2 |= I2C_CR2_START;
 8001c8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c8e:	6053      	str	r3, [r2, #4]

        /* State change.*/
        i2cp->state = I2C_ACTIVE_RX;
 8001c90:	7001      	strb	r1, [r0, #0]
 8001c92:	e770      	b.n	8001b76 <VectorBC+0x56>
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
 8001c94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001c96:	6844      	ldr	r4, [r0, #4]
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
 8001c98:	685b      	ldr	r3, [r3, #4]
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
            (n << 16U) | reload;
 8001c9a:	68a4      	ldr	r4, [r4, #8]
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
 8001c9c:	685b      	ldr	r3, [r3, #4]
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001c9e:	6850      	ldr	r0, [r2, #4]
            (n << 16U) | reload;
 8001ca0:	f020 70ff 	bic.w	r0, r0, #33423360	; 0x1fe0000
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
  if (n > 255U) {
 8001ca4:	2bff      	cmp	r3, #255	; 0xff
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
            (n << 16U) | reload;
 8001ca6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001caa:	ea40 0004 	orr.w	r0, r0, r4

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
  if (n > 255U) {
    n = 255U;
    reload = I2C_CR2_RELOAD;
 8001cae:	bf8a      	itet	hi
 8001cb0:	f04f 7180 	movhi.w	r1, #16777216	; 0x1000000
 8001cb4:	041b      	lslls	r3, r3, #16
  uint32_t reload;
  size_t n;

  /* The unit can transfer 255 bytes maximum in a single operation.*/
  n = i2c_lld_get_txbytes(i2cp);
  if (n > 255U) {
 8001cb6:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
            (n << 16U) | reload;
 8001cba:	4301      	orrs	r1, r0
 8001cbc:	4319      	orrs	r1, r3
    reload = 0U;
  }

  /* Configures the CR2 registers with both the calculated and static
     settings.*/
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001cbe:	6051      	str	r1, [r2, #4]
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
}
 8001cc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Clearing IRQ bits.*/
  I2CD1.i2c->ICR = isr & I2C_INT_MASK;

  i2c_lld_serve_interrupt(&I2CD1, isr);

  OSAL_IRQ_EPILOGUE();
 8001cc4:	f7fe be8c 	b.w	80009e0 <_port_irq_epilogue>
 8001cc8:	20000b04 	.word	0x20000b04
 8001ccc:	20000b20 	.word	0x20000b20

08001cd0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001cd0:	4924      	ldr	r1, [pc, #144]	; (8001d64 <__early_init+0x94>)
 8001cd2:	680b      	ldr	r3, [r1, #0]
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001cda:	680a      	ldr	r2, [r1, #0]
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <__early_init+0x94>)
 8001cde:	0790      	lsls	r0, r2, #30
 8001ce0:	d5fb      	bpl.n	8001cda <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	f022 0203 	bic.w	r2, r2, #3
 8001ce8:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001cee:	4619      	mov	r1, r3
 8001cf0:	684b      	ldr	r3, [r1, #4]
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <__early_init+0x94>)
 8001cf4:	f013 030c 	ands.w	r3, r3, #12
 8001cf8:	d1fa      	bne.n	8001cf0 <__early_init+0x20>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001cfa:	6811      	ldr	r1, [r2, #0]
 8001cfc:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8001d00:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001d02:	6053      	str	r3, [r2, #4]

#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8001d04:	6813      	ldr	r3, [r2, #0]
 8001d06:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001d0a:	6013      	str	r3, [r2, #0]
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001d0c:	6811      	ldr	r1, [r2, #0]
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <__early_init+0x94>)
 8001d10:	0389      	lsls	r1, r1, #14
 8001d12:	d5fb      	bpl.n	8001d0c <__early_init+0x3c>
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <__early_init+0x94>)
 8001d22:	0788      	lsls	r0, r1, #30
 8001d24:	d5fb      	bpl.n	8001d1e <__early_init+0x4e>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <__early_init+0x98>)
 8001d28:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8001d2a:	f44f 5104 	mov.w	r1, #8448	; 0x2100
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8001d2e:	2230      	movs	r2, #48	; 0x30

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8001d30:	62d9      	str	r1, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001d3a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <__early_init+0x94>)
 8001d40:	0189      	lsls	r1, r1, #6
 8001d42:	d5fb      	bpl.n	8001d3c <__early_init+0x6c>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <__early_init+0x9c>)
 8001d46:	2112      	movs	r1, #18
 8001d48:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001d4a:	6853      	ldr	r3, [r2, #4]
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001d52:	6853      	ldr	r3, [r2, #4]
 8001d54:	4903      	ldr	r1, [pc, #12]	; (8001d64 <__early_init+0x94>)
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d1f9      	bne.n	8001d52 <__early_init+0x82>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_TIM8SW | STM32_TIM1SW;
 8001d5e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001d60:	630b      	str	r3, [r1, #48]	; 0x30
 8001d62:	4770      	bx	lr
 8001d64:	40021000 	.word	0x40021000
 8001d68:	001d2400 	.word	0x001d2400
 8001d6c:	40022000 	.word	0x40022000

08001d70 <Thread1>:
};

/*********************PWMICU*********************/

static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8001d70:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001d74:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8001f18 <Thread1+0x1a8>
 8001d78:	4b60      	ldr	r3, [pc, #384]	; (8001efc <Thread1+0x18c>)
 8001d7a:	f8da 2018 	ldr.w	r2, [sl, #24]


static uint8_t readGyro(float* data){
    // read from L3GD20 registers and assemble data
    // 0xc0 sets read and address increment
    char txbuf[8] = {0xc0 | 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	495f      	ldr	r1, [pc, #380]	; (8001f00 <Thread1+0x190>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4d5f      	ldr	r5, [pc, #380]	; (8001f04 <Thread1+0x194>)
    spiUnselect(&SPID1);
    if (rxbuf[1] & 0x7) {
        int16_t val_x = (rxbuf[3] << 8) | rxbuf[2];
        int16_t val_y = (rxbuf[5] << 8) | rxbuf[4];
        int16_t val_z = (rxbuf[7] << 8) | rxbuf[6];
        data[0] = (((float)val_x) * mdps_per_digit)/1000.0;
 8001d86:	eddf 8a60 	vldr	s17, [pc, #384]	; 8001f08 <Thread1+0x198>
 8001d8a:	ed9f 8a60 	vldr	s16, [pc, #384]	; 8001f0c <Thread1+0x19c>


		while (readGyro(gyroData)==0) {}


			palClearPad(GPIOE, GPIOE_LED3_RED);
 8001d8e:	4c60      	ldr	r4, [pc, #384]	; (8001f10 <Thread1+0x1a0>)
 8001d90:	6191      	str	r1, [r2, #24]
};

/*********************PWMICU*********************/

static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	f04f 0920 	mov.w	r9, #32


static uint8_t readGyro(float* data){
    // read from L3GD20 registers and assemble data
    // 0xc0 sets read and address increment
    char txbuf[8] = {0xc0 | 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8001d98:	9002      	str	r0, [sp, #8]
 8001d9a:	9303      	str	r3, [sp, #12]
 8001d9c:	9802      	ldr	r0, [sp, #8]
 8001d9e:	9903      	ldr	r1, [sp, #12]
 8001da0:	ab04      	add	r3, sp, #16
 8001da2:	c303      	stmia	r3!, {r0, r1}
 8001da4:	f389 8811 	msr	BASEPRI, r9
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8001da8:	686a      	ldr	r2, [r5, #4]
 8001daa:	8913      	ldrh	r3, [r2, #8]
 8001dac:	6852      	ldr	r2, [r2, #4]
 8001dae:	2601      	movs	r6, #1
 8001db0:	fa06 f303 	lsl.w	r3, r6, r3
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	8353      	strh	r3, [r2, #26]
 8001db8:	2700      	movs	r7, #0
 8001dba:	f387 8811 	msr	BASEPRI, r7
 8001dbe:	f389 8811 	msr	BASEPRI, r9
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8001dc2:	f04f 0803 	mov.w	r8, #3
 8001dc6:	aa06      	add	r2, sp, #24
 8001dc8:	a904      	add	r1, sp, #16
 8001dca:	2008      	movs	r0, #8
 8001dcc:	f885 8000 	strb.w	r8, [r5]
 8001dd0:	f000 fe56 	bl	8002a80 <spi_lld_exchange.constprop.17>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001dd4:	f8da 3018 	ldr.w	r3, [sl, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 8001dd8:	4a4e      	ldr	r2, [pc, #312]	; (8001f14 <Thread1+0x1a4>)
 8001dda:	621a      	str	r2, [r3, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8001ddc:	4640      	mov	r0, r8
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8001dde:	60ab      	str	r3, [r5, #8]
  tp->p_u.wttrp = trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8001de0:	f7fe ff1e 	bl	8000c20 <chSchGoSleepS>
 8001de4:	f387 8811 	msr	BASEPRI, r7
 8001de8:	f389 8811 	msr	BASEPRI, r9
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8001dec:	686b      	ldr	r3, [r5, #4]
 8001dee:	891a      	ldrh	r2, [r3, #8]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4096      	lsls	r6, r2
 8001df4:	b2b6      	uxth	r6, r6
 8001df6:	831e      	strh	r6, [r3, #24]
 8001df8:	f387 8811 	msr	BASEPRI, r7
    char rxbuf[8];
    spiSelect(&SPID1);
    spiExchange(&SPID1, 8, txbuf, rxbuf);
    spiUnselect(&SPID1);
    if (rxbuf[1] & 0x7) {
 8001dfc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001e00:	075b      	lsls	r3, r3, #29


			palClearPad(GPIOE, GPIOE_LED3_RED);
			palClearPad(GPIOE, GPIOE_LED4_BLUE);
			palClearPad(GPIOE, GPIOE_LED5_ORANGE);
			palClearPad(GPIOE, GPIOE_LED6_GREEN);
 8001e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
			palClearPad(GPIOE, GPIOE_LED7_GREEN);
			palClearPad(GPIOE, GPIOE_LED8_ORANGE);
			palClearPad(GPIOE, GPIOE_LED9_BLUE);
			palClearPad(GPIOE, GPIOE_LED10_RED);
 8001e06:	f44f 5000 	mov.w	r0, #8192	; 0x2000


		while (readGyro(gyroData)==0) {}


			palClearPad(GPIOE, GPIOE_LED3_RED);
 8001e0a:	f44f 7c00 	mov.w	ip, #512	; 0x200
			palClearPad(GPIOE, GPIOE_LED4_BLUE);
 8001e0e:	f44f 7e80 	mov.w	lr, #256	; 0x100
			palClearPad(GPIOE, GPIOE_LED5_ORANGE);
			palClearPad(GPIOE, GPIOE_LED6_GREEN);
			palClearPad(GPIOE, GPIOE_LED7_GREEN);
 8001e12:	f44f 6b00 	mov.w	fp, #2048	; 0x800
			palClearPad(GPIOE, GPIOE_LED8_ORANGE);
 8001e16:	f44f 4880 	mov.w	r8, #16384	; 0x4000
    char txbuf[8] = {0xc0 | 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    char rxbuf[8];
    spiSelect(&SPID1);
    spiExchange(&SPID1, 8, txbuf, rxbuf);
    spiUnselect(&SPID1);
    if (rxbuf[1] & 0x7) {
 8001e1a:	d0bf      	beq.n	8001d9c <Thread1+0x2c>
        int16_t val_x = (rxbuf[3] << 8) | rxbuf[2];
        int16_t val_y = (rxbuf[5] << 8) | rxbuf[4];
        int16_t val_z = (rxbuf[7] << 8) | rxbuf[6];
        data[0] = (((float)val_x) * mdps_per_digit)/1000.0;
 8001e1c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8001e20:	f89d 201a 	ldrb.w	r2, [sp, #26]
        data[1] = (((float)val_y) * mdps_per_digit)/1000.0;
 8001e24:	f89d 601d 	ldrb.w	r6, [sp, #29]
 8001e28:	f89d 701c 	ldrb.w	r7, [sp, #28]


		while (readGyro(gyroData)==0) {}


			palClearPad(GPIOE, GPIOE_LED3_RED);
 8001e2c:	f8a4 c01a 	strh.w	ip, [r4, #26]
    spiUnselect(&SPID1);
    if (rxbuf[1] & 0x7) {
        int16_t val_x = (rxbuf[3] << 8) | rxbuf[2];
        int16_t val_y = (rxbuf[5] << 8) | rxbuf[4];
        int16_t val_z = (rxbuf[7] << 8) | rxbuf[6];
        data[0] = (((float)val_x) * mdps_per_digit)/1000.0;
 8001e30:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001e34:	b212      	sxth	r2, r2
        data[1] = (((float)val_y) * mdps_per_digit)/1000.0;
 8001e36:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
    spiUnselect(&SPID1);
    if (rxbuf[1] & 0x7) {
        int16_t val_x = (rxbuf[3] << 8) | rxbuf[2];
        int16_t val_y = (rxbuf[5] << 8) | rxbuf[4];
        int16_t val_z = (rxbuf[7] << 8) | rxbuf[6];
        data[0] = (((float)val_x) * mdps_per_digit)/1000.0;
 8001e3a:	ee07 2a90 	vmov	s15, r2
        data[1] = (((float)val_y) * mdps_per_digit)/1000.0;
 8001e3e:	b21b      	sxth	r3, r3
    spiUnselect(&SPID1);
    if (rxbuf[1] & 0x7) {
        int16_t val_x = (rxbuf[3] << 8) | rxbuf[2];
        int16_t val_y = (rxbuf[5] << 8) | rxbuf[4];
        int16_t val_z = (rxbuf[7] << 8) | rxbuf[6];
        data[0] = (((float)val_x) * mdps_per_digit)/1000.0;
 8001e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        data[1] = (((float)val_y) * mdps_per_digit)/1000.0;
 8001e44:	ee07 3a90 	vmov	s15, r3
    spiUnselect(&SPID1);
    if (rxbuf[1] & 0x7) {
        int16_t val_x = (rxbuf[3] << 8) | rxbuf[2];
        int16_t val_y = (rxbuf[5] << 8) | rxbuf[4];
        int16_t val_z = (rxbuf[7] << 8) | rxbuf[6];
        data[0] = (((float)val_x) * mdps_per_digit)/1000.0;
 8001e48:	ee27 7a28 	vmul.f32	s14, s14, s17
        data[1] = (((float)val_y) * mdps_per_digit)/1000.0;
 8001e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    spiUnselect(&SPID1);
    if (rxbuf[1] & 0x7) {
        int16_t val_x = (rxbuf[3] << 8) | rxbuf[2];
        int16_t val_y = (rxbuf[5] << 8) | rxbuf[4];
        int16_t val_z = (rxbuf[7] << 8) | rxbuf[6];
        data[0] = (((float)val_x) * mdps_per_digit)/1000.0;
 8001e50:	eec7 6a08 	vdiv.f32	s13, s14, s16
		while (readGyro(gyroData)==0) {}


			palClearPad(GPIOE, GPIOE_LED3_RED);
			palClearPad(GPIOE, GPIOE_LED4_BLUE);
			palClearPad(GPIOE, GPIOE_LED5_ORANGE);
 8001e54:	f44f 6380 	mov.w	r3, #1024	; 0x400

		while (readGyro(gyroData)==0) {}


			palClearPad(GPIOE, GPIOE_LED3_RED);
			palClearPad(GPIOE, GPIOE_LED4_BLUE);
 8001e58:	f8a4 e01a 	strh.w	lr, [r4, #26]
			palClearPad(GPIOE, GPIOE_LED5_ORANGE);
 8001e5c:	8363      	strh	r3, [r4, #26]
			palClearPad(GPIOE, GPIOE_LED6_GREEN);
			palClearPad(GPIOE, GPIOE_LED7_GREEN);
			palClearPad(GPIOE, GPIOE_LED8_ORANGE);
			palClearPad(GPIOE, GPIOE_LED9_BLUE);
 8001e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000


			palClearPad(GPIOE, GPIOE_LED3_RED);
			palClearPad(GPIOE, GPIOE_LED4_BLUE);
			palClearPad(GPIOE, GPIOE_LED5_ORANGE);
			palClearPad(GPIOE, GPIOE_LED6_GREEN);
 8001e62:	8361      	strh	r1, [r4, #26]
			palClearPad(GPIOE, GPIOE_LED7_GREEN);
 8001e64:	f8a4 b01a 	strh.w	fp, [r4, #26]
			palClearPad(GPIOE, GPIOE_LED8_ORANGE);
 8001e68:	f8a4 801a 	strh.w	r8, [r4, #26]
			palClearPad(GPIOE, GPIOE_LED9_BLUE);
 8001e6c:	8363      	strh	r3, [r4, #26]
			palClearPad(GPIOE, GPIOE_LED10_RED);
 8001e6e:	8360      	strh	r0, [r4, #26]
    if (rxbuf[1] & 0x7) {
        int16_t val_x = (rxbuf[3] << 8) | rxbuf[2];
        int16_t val_y = (rxbuf[5] << 8) | rxbuf[4];
        int16_t val_z = (rxbuf[7] << 8) | rxbuf[6];
        data[0] = (((float)val_x) * mdps_per_digit)/1000.0;
        data[1] = (((float)val_y) * mdps_per_digit)/1000.0;
 8001e70:	ee67 7aa8 	vmul.f32	s15, s15, s17
				palSetPad(GPIOE, GPIOE_LED6_GREEN);
			}*/

			if ( Xval>Yval){

				if ((int8_t)gyroData[0] > 5.0f){
 8001e74:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
    if (rxbuf[1] & 0x7) {
        int16_t val_x = (rxbuf[3] << 8) | rxbuf[2];
        int16_t val_y = (rxbuf[5] << 8) | rxbuf[4];
        int16_t val_z = (rxbuf[7] << 8) | rxbuf[6];
        data[0] = (((float)val_x) * mdps_per_digit)/1000.0;
        data[1] = (((float)val_y) * mdps_per_digit)/1000.0;
 8001e78:	ee87 7a88 	vdiv.f32	s14, s15, s16
			palClearPad(GPIOE, GPIOE_LED8_ORANGE);
			palClearPad(GPIOE, GPIOE_LED9_BLUE);
			palClearPad(GPIOE, GPIOE_LED10_RED);


			Xval = ABS((int8_t)(gyroData[0]));
 8001e7c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
				if ((int8_t)gyroData[0] > 5.0f){

				  palSetPad(GPIOE, GPIOE_LED10_RED);

				}
				if ((int8_t)gyroData[0] < -5.0f){
 8001e80:	eeb9 6a04 	vmov.f32	s12, #148	; 0xc0a00000 -5.0
			palClearPad(GPIOE, GPIOE_LED8_ORANGE);
			palClearPad(GPIOE, GPIOE_LED9_BLUE);
			palClearPad(GPIOE, GPIOE_LED10_RED);


			Xval = ABS((int8_t)(gyroData[0]));
 8001e84:	edcd 7a00 	vstr	s15, [sp]
			Yval = ABS((int8_t)(gyroData[1]));
 8001e88:	eefd 7ac7 	vcvt.s32.f32	s15, s14
			palClearPad(GPIOE, GPIOE_LED8_ORANGE);
			palClearPad(GPIOE, GPIOE_LED9_BLUE);
			palClearPad(GPIOE, GPIOE_LED10_RED);


			Xval = ABS((int8_t)(gyroData[0]));
 8001e8c:	f99d 2000 	ldrsb.w	r2, [sp]
			Yval = ABS((int8_t)(gyroData[1]));
 8001e90:	edcd 7a01 	vstr	s15, [sp, #4]
 8001e94:	f99d 3004 	ldrsb.w	r3, [sp, #4]

			/*if ((Yval> Xval) && ((int8_t)gyroData[1] < -20.0f) ){
				palSetPad(GPIOE, GPIOE_LED6_GREEN);
			}*/

			if ( Xval>Yval){
 8001e98:	ea82 77e2 	eor.w	r7, r2, r2, asr #31
 8001e9c:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 8001ea0:	eba7 77e2 	sub.w	r7, r7, r2, asr #31
 8001ea4:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 8001ea8:	b2ff      	uxtb	r7, r7
 8001eaa:	b2f6      	uxtb	r6, r6
 8001eac:	42b7      	cmp	r7, r6
 8001eae:	d912      	bls.n	8001ed6 <Thread1+0x166>

				if ((int8_t)gyroData[0] > 5.0f){
 8001eb0:	ee07 2a90 	vmov	s15, r2
 8001eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				  palSetPad(GPIOE, GPIOE_LED10_RED);

				}
				if ((int8_t)gyroData[0] < -5.0f){

					palSetPad(GPIOE, GPIOE_LED3_RED);
 8001eb8:	4663      	mov	r3, ip
				palSetPad(GPIOE, GPIOE_LED6_GREEN);
			}*/

			if ( Xval>Yval){

				if ((int8_t)gyroData[0] > 5.0f){
 8001eba:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

				  palSetPad(GPIOE, GPIOE_LED10_RED);

				}
				if ((int8_t)gyroData[0] < -5.0f){
 8001ec2:	eef4 7ac6 	vcmpe.f32	s15, s12

			if ( Xval>Yval){

				if ((int8_t)gyroData[0] > 5.0f){

				  palSetPad(GPIOE, GPIOE_LED10_RED);
 8001ec6:	bfc8      	it	gt
 8001ec8:	8320      	strhgt	r0, [r4, #24]

				}
				if ((int8_t)gyroData[0] < -5.0f){
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	f57f af65 	bpl.w	8001d9c <Thread1+0x2c>
			else{
				if ((int8_t)gyroData[1] < -5.0f){
					palSetPad(GPIOE, GPIOE_LED6_GREEN);
				}
				if ((int8_t)gyroData[1] > 5.0f){
					palSetPad(GPIOE, GPIOE_LED7_GREEN);
 8001ed2:	8323      	strh	r3, [r4, #24]
 8001ed4:	e762      	b.n	8001d9c <Thread1+0x2c>
					palSetPad(GPIOE, GPIOE_LED3_RED);

				}
			}
			else{
				if ((int8_t)gyroData[1] < -5.0f){
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					palSetPad(GPIOE, GPIOE_LED6_GREEN);
				}
				if ((int8_t)gyroData[1] > 5.0f){
					palSetPad(GPIOE, GPIOE_LED7_GREEN);
 8001ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
					palSetPad(GPIOE, GPIOE_LED3_RED);

				}
			}
			else{
				if ((int8_t)gyroData[1] < -5.0f){
 8001ee2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					palSetPad(GPIOE, GPIOE_LED6_GREEN);
				}
				if ((int8_t)gyroData[1] > 5.0f){
 8001eea:	eef4 7ae5 	vcmpe.f32	s15, s11

				}
			}
			else{
				if ((int8_t)gyroData[1] < -5.0f){
					palSetPad(GPIOE, GPIOE_LED6_GREEN);
 8001eee:	bf48      	it	mi
 8001ef0:	8321      	strhmi	r1, [r4, #24]
				}
				if ((int8_t)gyroData[1] > 5.0f){
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	f77f af51 	ble.w	8001d9c <Thread1+0x2c>
 8001efa:	e7ea      	b.n	8001ed2 <Thread1+0x162>
 8001efc:	08002b70 	.word	0x08002b70
 8001f00:	08002cb0 	.word	0x08002cb0
 8001f04:	20000e08 	.word	0x20000e08
 8001f08:	410c0000 	.word	0x410c0000
 8001f0c:	447a0000 	.word	0x447a0000
 8001f10:	48001000 	.word	0x48001000
 8001f14:	20000e10 	.word	0x20000e10
 8001f18:	20000c30 	.word	0x20000c30
 8001f1c:	00000000 	.word	0x00000000

08001f20 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <main+0x70>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001f22:	481c      	ldr	r0, [pc, #112]	; (8001f94 <main+0x74>)
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8001f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f26:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2a:	2200      	movs	r2, #0
			}
	}
}


int main(void) {
 8001f2c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001f30:	6299      	str	r1, [r3, #40]	; 0x28
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8001f34:	691c      	ldr	r4, [r3, #16]
 8001f36:	6119      	str	r1, [r3, #16]
 8001f38:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8001f3a:	68dc      	ldr	r4, [r3, #12]
 8001f3c:	60d9      	str	r1, [r3, #12]
 8001f3e:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8001f40:	69d9      	ldr	r1, [r3, #28]
 8001f42:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001f46:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001f48:	6801      	ldr	r1, [r0, #0]
 8001f4a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001f4e:	6001      	str	r1, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8001f50:	6a19      	ldr	r1, [r3, #32]
 8001f52:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001f56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001f5a:	b08b      	sub	sp, #44	; 0x2c
 8001f5c:	d003      	beq.n	8001f66 <main+0x46>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001f5e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001f62:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 8001f64:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <main+0x70>)
 8001f68:	6a1a      	ldr	r2, [r3, #32]
 8001f6a:	0412      	lsls	r2, r2, #16
 8001f6c:	d407      	bmi.n	8001f7e <main+0x5e>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f74:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7c:	621a      	str	r2, [r3, #32]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <main+0x78>)
 8001f80:	4906      	ldr	r1, [pc, #24]	; (8001f9c <main+0x7c>)
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <main+0x80>)
 8001f84:	4c07      	ldr	r4, [pc, #28]	; (8001fa4 <main+0x84>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	6002      	str	r2, [r0, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	e00d      	b.n	8001faa <main+0x8a>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
 8001f98:	20000e38 	.word	0x20000e38
 8001f9c:	08002ce0 	.word	0x08002ce0
 8001fa0:	40020008 	.word	0x40020008
 8001fa4:	20000b50 	.word	0x20000b50
 8001fa8:	684b      	ldr	r3, [r1, #4]
 8001faa:	6018      	str	r0, [r3, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001fac:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001fb0:	3201      	adds	r2, #1
 8001fb2:	2a0c      	cmp	r2, #12
 8001fb4:	f101 0114 	add.w	r1, r1, #20
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001fb8:	f04f 0300 	mov.w	r3, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001fbc:	d1f4      	bne.n	8001fa8 <main+0x88>
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8001fbe:	4ebb      	ldr	r6, [pc, #748]	; (80022ac <main+0x38c>)
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8001fc0:	4cbb      	ldr	r4, [pc, #748]	; (80022b0 <main+0x390>)
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001fc2:	49bc      	ldr	r1, [pc, #752]	; (80022b4 <main+0x394>)

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8001fc4:	4dbc      	ldr	r5, [pc, #752]	; (80022b8 <main+0x398>)
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8001fc6:	f8df 9364 	ldr.w	r9, [pc, #868]	; 800232c <main+0x40c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001fca:	4fbc      	ldr	r7, [pc, #752]	; (80022bc <main+0x39c>)
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001fcc:	f8df 8360 	ldr.w	r8, [pc, #864]	; 8002330 <main+0x410>
#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
#if STM32_I2C_USE_DMA == TRUE
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8001fd0:	f8df e360 	ldr.w	lr, [pc, #864]	; 8002334 <main+0x414>
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8001fd4:	4aba      	ldr	r2, [pc, #744]	; (80022c0 <main+0x3a0>)
  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8001fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fda:	6070      	str	r0, [r6, #4]
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8001fdc:	6060      	str	r0, [r4, #4]
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001fde:	6988      	ldr	r0, [r1, #24]
 8001fe0:	4cb8      	ldr	r4, [pc, #736]	; (80022c4 <main+0x3a4>)
 8001fe2:	4eb9      	ldr	r6, [pc, #740]	; (80022c8 <main+0x3a8>)
 8001fe4:	f040 0001 	orr.w	r0, r0, #1
 8001fe8:	6188      	str	r0, [r1, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8001fea:	6828      	ldr	r0, [r5, #0]
 8001fec:	f040 0020 	orr.w	r0, r0, #32
 8001ff0:	6028      	str	r0, [r5, #0]
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8001ff2:	f8d1 c014 	ldr.w	ip, [r1, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001ff6:	4db5      	ldr	r5, [pc, #724]	; (80022cc <main+0x3ac>)
 8001ff8:	48b5      	ldr	r0, [pc, #724]	; (80022d0 <main+0x3b0>)
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8001ffa:	f44c 0cfc 	orr.w	ip, ip, #8257536	; 0x7e0000
 8001ffe:	f8c1 c014 	str.w	ip, [r1, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002002:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8002006:	f8df c330 	ldr.w	ip, [pc, #816]	; 8002338 <main+0x418>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800200a:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800200c:	f8c1 9008 	str.w	r9, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8002010:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8002014:	f64f 79ff 	movw	r9, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8002018:	f8df c320 	ldr.w	ip, [pc, #800]	; 800233c <main+0x41c>
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 800201c:	f8c1 9014 	str.w	r9, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8002020:	f8c1 c020 	str.w	ip, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8002024:	f44f 2c6e 	mov.w	ip, #974848	; 0xee000
 8002028:	f8c1 c024 	str.w	ip, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800202c:	f8df c310 	ldr.w	ip, [pc, #784]	; 8002340 <main+0x420>
 8002030:	f8c1 c000 	str.w	ip, [r1]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002034:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  gpiop->OSPEEDR = config->ospeedr;
 8002038:	f24f 01c0 	movw	r1, #61632	; 0xf0c0
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800203c:	f8c7 c004 	str.w	ip, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002040:	60b9      	str	r1, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8002042:	49a4      	ldr	r1, [pc, #656]	; (80022d4 <main+0x3b4>)
 8002044:	60f9      	str	r1, [r7, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8002046:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 800204a:	f8c7 9014 	str.w	r9, [r7, #20]
  gpiop->AFRL    = config->afrl;
 800204e:	6239      	str	r1, [r7, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8002050:	f24a 0180 	movw	r1, #41088	; 0xa080
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002056:	6039      	str	r1, [r7, #0]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002058:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800205c:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800205e:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8002060:	499d      	ldr	r1, [pc, #628]	; (80022d8 <main+0x3b8>)
 8002062:	60e1      	str	r1, [r4, #12]
 8002064:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8002068:	f8c4 9014 	str.w	r9, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800206c:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800206e:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002070:	6023      	str	r3, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002072:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002074:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8002076:	60f1      	str	r1, [r6, #12]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8002078:	4998      	ldr	r1, [pc, #608]	; (80022dc <main+0x3bc>)
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 800207a:	f8c6 9014 	str.w	r9, [r6, #20]
  gpiop->AFRL    = config->afrl;
 800207e:	6233      	str	r3, [r6, #32]
  i2cp->config = NULL;
 8002080:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->AFRH    = config->afrh;
 8002084:	6273      	str	r3, [r6, #36]	; 0x24
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8002086:	f8c8 3014 	str.w	r3, [r8, #20]
  gpiop->MODER   = config->moder;
 800208a:	6033      	str	r3, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800208c:	606b      	str	r3, [r5, #4]
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 800208e:	f8c8 301c 	str.w	r3, [r8, #28]
  gpiop->OSPEEDR = config->ospeedr;
 8002092:	60a9      	str	r1, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002094:	4992      	ldr	r1, [pc, #584]	; (80022e0 <main+0x3c0>)
 8002096:	60e9      	str	r1, [r5, #12]
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8002098:	4f92      	ldr	r7, [pc, #584]	; (80022e4 <main+0x3c4>)
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 800209a:	4c93      	ldr	r4, [pc, #588]	; (80022e8 <main+0x3c8>)
  gpiop->ODR     = config->odr;
 800209c:	21ff      	movs	r1, #255	; 0xff
 800209e:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80020a0:	4992      	ldr	r1, [pc, #584]	; (80022ec <main+0x3cc>)

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80020a2:	622b      	str	r3, [r5, #32]
  I2CD1.i2c    = I2C1;
#if STM32_I2C_USE_DMA == TRUE
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80020a4:	f8c8 e028 	str.w	lr, [r8, #40]	; 0x28
  gpiop->AFRH    = config->afrh;
 80020a8:	626b      	str	r3, [r5, #36]	; 0x24
  icup->config = NULL;
 80020aa:	607b      	str	r3, [r7, #4]
  gpiop->MODER   = config->moder;
 80020ac:	6029      	str	r1, [r5, #0]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80020ae:	250f      	movs	r5, #15
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80020b0:	6043      	str	r3, [r0, #4]
  pwmp->config   = NULL;
 80020b2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80020b4:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80020b6:	4d8e      	ldr	r5, [pc, #568]	; (80022f0 <main+0x3d0>)
 80020b8:	60c5      	str	r5, [r0, #12]
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 80020ba:	4d8e      	ldr	r5, [pc, #568]	; (80022f4 <main+0x3d4>)
  pwmp->enabled  = 0;
 80020bc:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 80020be:	f8c0 9014 	str.w	r9, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80020c2:	6203      	str	r3, [r0, #32]
 80020c4:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
#if STM32_I2C_USE_DMA == TRUE
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80020c8:	f1ae 0514 	sub.w	r5, lr, #20
  gpiop->AFRH    = config->afrh;
 80020cc:	6243      	str	r3, [r0, #36]	; 0x24
 80020ce:	4611      	mov	r1, r2
 80020d0:	f8c8 502c 	str.w	r5, [r8, #44]	; 0x2c
  gpiop->MODER   = config->moder;
 80020d4:	6003      	str	r3, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80020d6:	f108 050c 	add.w	r5, r8, #12
void icu_lld_init(void) {

#if STM32_ICU_USE_TIM1
  /* Driver initialization.*/
  icuObjectInit(&ICUD1);
  ICUD1.tim = STM32_TIM1;
 80020da:	4887      	ldr	r0, [pc, #540]	; (80022f8 <main+0x3d8>)
 80020dc:	60f8      	str	r0, [r7, #12]
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 80020de:	2601      	movs	r6, #1
 80020e0:	f8c8 500c 	str.w	r5, [r8, #12]
  tqp->p_prev = (thread_t *)tqp;
 80020e4:	f8c8 5010 	str.w	r5, [r8, #16]
 80020e8:	4884      	ldr	r0, [pc, #528]	; (80022fc <main+0x3dc>)
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 80020ea:	703e      	strb	r6, [r7, #0]
#endif

#if STM32_PWM_USE_TIM4
  /* Driver initialization.*/
  pwmObjectInit(&PWMD4);
  PWMD4.channels = STM32_TIM4_CHANNELS;
 80020ec:	2504      	movs	r5, #4
 80020ee:	f888 6000 	strb.w	r6, [r8]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 80020f2:	7026      	strb	r6, [r4, #0]
 80020f4:	7425      	strb	r5, [r4, #16]
 80020f6:	f841 0b04 	str.w	r0, [r1], #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80020fa:	2510      	movs	r5, #16

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80020fc:	4880      	ldr	r0, [pc, #512]	; (8002300 <main+0x3e0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80020fe:	6153      	str	r3, [r2, #20]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8002100:	6395      	str	r5, [r2, #56]	; 0x38
  PWMD4.tim = STM32_TIM4;
 8002102:	4d80      	ldr	r5, [pc, #512]	; (8002304 <main+0x3e4>)
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002104:	6051      	str	r1, [r2, #4]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8002106:	7216      	strb	r6, [r2, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8002108:	6293      	str	r3, [r2, #40]	; 0x28
  iqp->q_link    = link;
 800210a:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800210c:	6512      	str	r2, [r2, #80]	; 0x50
 800210e:	f880 c325 	strb.w	ip, [r0, #805]	; 0x325
 8002112:	61a5      	str	r5, [r4, #24]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8002114:	f102 0574 	add.w	r5, r2, #116	; 0x74
 8002118:	6415      	str	r5, [r2, #64]	; 0x40
  oqp->q_notify  = onfy;
 800211a:	4d7b      	ldr	r5, [pc, #492]	; (8002308 <main+0x3e8>)
 800211c:	64d5      	str	r5, [r2, #76]	; 0x4c
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 800211e:	4d7b      	ldr	r5, [pc, #492]	; (800230c <main+0x3ec>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8002120:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8002344 <main+0x424>
 8002124:	6755      	str	r5, [r2, #116]	; 0x74
  SD1.clock = STM32_USART1CLK;
 8002126:	4d7a      	ldr	r5, [pc, #488]	; (8002310 <main+0x3f0>)
 8002128:	6795      	str	r5, [r2, #120]	; 0x78
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800212a:	2520      	movs	r5, #32
 800212c:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
  spip->config = NULL;
 8002130:	f8c9 3004 	str.w	r3, [r9, #4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002134:	6045      	str	r5, [r0, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002136:	f102 000c 	add.w	r0, r2, #12
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800213a:	f102 0554 	add.w	r5, r2, #84	; 0x54
 800213e:	60d0      	str	r0, [r2, #12]
  tqp->p_prev = (thread_t *)tqp;
 8002140:	6110      	str	r0, [r2, #16]
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8002142:	f102 0064 	add.w	r0, r2, #100	; 0x64
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8002146:	4973      	ldr	r1, [pc, #460]	; (8002314 <main+0x3f4>)
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8002148:	6195      	str	r5, [r2, #24]
  iqp->q_rdptr   = bp;
 800214a:	6255      	str	r5, [r2, #36]	; 0x24
  iqp->q_wrptr   = bp;
 800214c:	6215      	str	r5, [r2, #32]
  iqp->q_top     = bp + size;
 800214e:	61d0      	str	r0, [r2, #28]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002150:	f102 0530 	add.w	r5, r2, #48	; 0x30
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8002154:	63d0      	str	r0, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8002156:	6490      	str	r0, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8002158:	6450      	str	r0, [r2, #68]	; 0x44
 800215a:	f109 000c 	add.w	r0, r9, #12
 800215e:	6315      	str	r5, [r2, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8002160:	6355      	str	r5, [r2, #52]	; 0x34
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002162:	f8c9 000c 	str.w	r0, [r9, #12]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8002166:	f1ae 0250 	sub.w	r2, lr, #80	; 0x50
  tqp->p_prev = (thread_t *)tqp;
 800216a:	f8c9 0010 	str.w	r0, [r9, #16]
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 800216e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8002348 <main+0x428>
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8002172:	f889 6000 	strb.w	r6, [r9]
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8002176:	f241 0018 	movw	r0, #4120	; 0x1018
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800217a:	f1ae 0764 	sub.w	r7, lr, #100	; 0x64
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800217e:	f241 050a 	movw	r5, #4106	; 0x100a
  spip->config = NULL;
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8002182:	f8c9 3008 	str.w	r3, [r9, #8]
 8002186:	f8c9 3014 	str.w	r3, [r9, #20]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800218a:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800218e:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8002192:	f8c9 c01c 	str.w	ip, [r9, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8002196:	f8c9 7020 	str.w	r7, [r9, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800219a:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 800219e:	700e      	strb	r6, [r1, #0]
  usbp->config       = NULL;
 80021a0:	604b      	str	r3, [r1, #4]
 80021a2:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80021a6:	f101 0044 	add.w	r0, r1, #68	; 0x44
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80021aa:	f842 3f04 	str.w	r3, [r2, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80021ae:	4282      	cmp	r2, r0
    usbp->in_params[i]  = NULL;
 80021b0:	f04f 0600 	mov.w	r6, #0
    usbp->out_params[i] = NULL;
 80021b4:	61d3      	str	r3, [r2, #28]
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80021b6:	d1f8      	bne.n	80021aa <main+0x28a>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80021b8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80022b4 <main+0x394>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80021bc:	4f56      	ldr	r7, [pc, #344]	; (8002318 <main+0x3f8>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80021be:	f8da 301c 	ldr.w	r3, [sl, #28]
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 80021c2:	810e      	strh	r6, [r1, #8]
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8ca 301c 	str.w	r3, [sl, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80021cc:	f8d7 b008 	ldr.w	fp, [r7, #8]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <main+0x3fc>)
  usbp->receiving    = 0;
 80021d2:	814e      	strh	r6, [r1, #10]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80021d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80021d8:	f04b 0b01 	orr.w	fp, fp, #1
 80021dc:	f8c7 b008 	str.w	fp, [r7, #8]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80021e0:	4d47      	ldr	r5, [pc, #284]	; (8002300 <main+0x3e0>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80021e2:	f8df c168 	ldr.w	ip, [pc, #360]	; 800234c <main+0x42c>

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80021e6:	f8df e168 	ldr.w	lr, [pc, #360]	; 8002350 <main+0x430>
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80021ea:	484d      	ldr	r0, [pc, #308]	; (8002320 <main+0x400>)
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80021ec:	f04f 0b01 	mov.w	fp, #1
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80021f0:	f04f 37ff 	mov.w	r7, #4294967295

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80021f4:	f641 411f 	movw	r1, #7199	; 0x1c1f
 80021f8:	6299      	str	r1, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80021fa:	62df      	str	r7, [r3, #44]	; 0x2c
 80021fc:	2180      	movs	r1, #128	; 0x80
  STM32_ST_TIM->CCMR1  = 0;
 80021fe:	619e      	str	r6, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002200:	635e      	str	r6, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8002202:	60de      	str	r6, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8002204:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002206:	f8c3 b014 	str.w	fp, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800220a:	f8c3 b000 	str.w	fp, [r3]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800220e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002212:	f885 131c 	strb.w	r1, [r5, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002216:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800221a:	602b      	str	r3, [r5, #0]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800221c:	6096      	str	r6, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221e:	68d1      	ldr	r1, [r2, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002220:	4d40      	ldr	r5, [pc, #256]	; (8002324 <main+0x404>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8002222:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002226:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
 8002228:	ea43 0c0c 	orr.w	ip, r3, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800222c:	f8c2 c00c 	str.w	ip, [r2, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002230:	f8de 300c 	ldr.w	r3, [lr, #12]
  tqp->p_prev = (thread_t *)tqp;
 8002234:	606d      	str	r5, [r5, #4]
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223a:	f8ce 300c 	str.w	r3, [lr, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800223e:	6803      	ldr	r3, [r0, #0]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8002240:	60ae      	str	r6, [r5, #8]
 8002242:	ea43 010b 	orr.w	r1, r3, fp
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	2310      	movs	r3, #16
 8002248:	6001      	str	r1, [r0, #0]
 800224a:	77d3      	strb	r3, [r2, #31]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800224c:	eb0d 0003 	add.w	r0, sp, r3
 8002250:	f04f 0320 	mov.w	r3, #32
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8002254:	f105 011c 	add.w	r1, r5, #28
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8002258:	612d      	str	r5, [r5, #16]
 800225a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800225e:	2200      	movs	r2, #0
 8002260:	2300      	movs	r3, #0
 8002262:	61e9      	str	r1, [r5, #28]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002264:	602d      	str	r5, [r5, #0]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8002266:	616d      	str	r5, [r5, #20]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002268:	6229      	str	r1, [r5, #32]
 800226a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ch.vtlist.vt_delta = (systime_t)-1;
 800226e:	626f      	str	r7, [r5, #36]	; 0x24
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8002270:	9704      	str	r7, [sp, #16]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8002272:	62ae      	str	r6, [r5, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8002274:	676e      	str	r6, [r5, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8002276:	9605      	str	r6, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 8002278:	9606      	str	r6, [sp, #24]
  tmp->n          = (ucnt_t)0;
 800227a:	9607      	str	r6, [sp, #28]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800227c:	f000 fb68 	bl	8002950 <chTMStartMeasurementX.constprop.48>
  chTMStopMeasurementX(&tm);
 8002280:	a804      	add	r0, sp, #16
 8002282:	f7fe fc85 	bl	8000b90 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8002286:	4a28      	ldr	r2, [pc, #160]	; (8002328 <main+0x408>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002288:	6969      	ldr	r1, [r5, #20]
  ch.tm.offset = tm.last;
 800228a:	9b06      	ldr	r3, [sp, #24]
 800228c:	676b      	str	r3, [r5, #116]	; 0x74
 800228e:	f102 0c10 	add.w	ip, r2, #16
 8002292:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8002296:	f8c2 c010 	str.w	ip, [r2, #16]
  tqp->p_prev = (thread_t *)tqp;
 800229a:	f8c2 c014 	str.w	ip, [r2, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800229e:	f04f 0c40 	mov.w	ip, #64	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80022a2:	6469      	str	r1, [r5, #68]	; 0x44
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80022a4:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
 80022a8:	e054      	b.n	8002354 <main+0x434>
 80022aa:	bf00      	nop
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010000 	.word	0x40010000
 80022bc:	48000400 	.word	0x48000400
 80022c0:	20000bb0 	.word	0x20000bb0
 80022c4:	48000800 	.word	0x48000800
 80022c8:	48000c00 	.word	0x48000c00
 80022cc:	48001000 	.word	0x48001000
 80022d0:	48001400 	.word	0x48001400
 80022d4:	55550515 	.word	0x55550515
 80022d8:	05555555 	.word	0x05555555
 80022dc:	ffff00c0 	.word	0xffff00c0
 80022e0:	01155515 	.word	0x01155515
 80022e4:	20000b38 	.word	0x20000b38
 80022e8:	20000ab8 	.word	0x20000ab8
 80022ec:	55550040 	.word	0x55550040
 80022f0:	55555550 	.word	0x55555550
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	08002cc0 	.word	0x08002cc0
 8002300:	e000e100 	.word	0xe000e100
 8002304:	40000800 	.word	0x40000800
 8002308:	08001131 	.word	0x08001131
 800230c:	40013800 	.word	0x40013800
 8002310:	02255100 	.word	0x02255100
 8002314:	20000a30 	.word	0x20000a30
 8002318:	e0042000 	.word	0xe0042000
 800231c:	e000ed00 	.word	0xe000ed00
 8002320:	e0001000 	.word	0xe0001000
 8002324:	20000c30 	.word	0x20000c30
 8002328:	20000ae0 	.word	0x20000ae0
 800232c:	3cc0fc00 	.word	0x3cc0fc00
 8002330:	20000b04 	.word	0x20000b04
 8002334:	08002d58 	.word	0x08002d58
 8002338:	64151154 	.word	0x64151154
 800233c:	55500000 	.word	0x55500000
 8002340:	2a80a800 	.word	0x2a80a800
 8002344:	20000e08 	.word	0x20000e08
 8002348:	40013000 	.word	0x40013000
 800234c:	05fa0300 	.word	0x05fa0300
 8002350:	e000edf0 	.word	0xe000edf0
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002354:	f8c5 c06c 	str.w	ip, [r5, #108]	; 0x6c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002358:	f885 604d 	strb.w	r6, [r5, #77]	; 0x4d
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800235c:	66ae      	str	r6, [r5, #104]	; 0x68
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800235e:	666e      	str	r6, [r5, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002360:	f885 b04e 	strb.w	fp, [r5, #78]	; 0x4e
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002364:	64ae      	str	r6, [r5, #72]	; 0x48
  REG_INSERT(tp);
 8002366:	642d      	str	r5, [r5, #64]	; 0x40
 8002368:	6196      	str	r6, [r2, #24]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800236a:	4f9f      	ldr	r7, [pc, #636]	; (80025e8 <main+0x6c8>)
 800236c:	610b      	str	r3, [r1, #16]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800236e:	489f      	ldr	r0, [pc, #636]	; (80025ec <main+0x6cc>)
 8002370:	616b      	str	r3, [r5, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8002372:	61ab      	str	r3, [r5, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002374:	f105 0354 	add.w	r3, r5, #84	; 0x54
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002378:	f8df c2a8 	ldr.w	ip, [pc, #680]	; 8002624 <main+0x704>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800237c:	499c      	ldr	r1, [pc, #624]	; (80025f0 <main+0x6d0>)
 800237e:	656b      	str	r3, [r5, #84]	; 0x54
 8002380:	4b9c      	ldr	r3, [pc, #624]	; (80025f4 <main+0x6d4>)
 8002382:	6013      	str	r3, [r2, #0]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002384:	f027 0707 	bic.w	r7, r7, #7
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002388:	f105 0358 	add.w	r3, r5, #88	; 0x58
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800238c:	f020 0007 	bic.w	r0, r0, #7
  default_heap.h_free.h.u.next = NULL;
 8002390:	6096      	str	r6, [r2, #8]
  default_heap.h_free.h.size = 0;
 8002392:	60d6      	str	r6, [r2, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8002394:	f885 b04c 	strb.w	fp, [r5, #76]	; 0x4c
 8002398:	65ab      	str	r3, [r5, #88]	; 0x58
  tqp->p_prev = (thread_t *)tqp;
 800239a:	65eb      	str	r3, [r5, #92]	; 0x5c
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800239c:	f8cc 7000 	str.w	r7, [ip]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80023a0:	6008      	str	r0, [r1, #0]
 80023a2:	f386 8811 	msr	BASEPRI, r6
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80023a6:	b662      	cpsie	i
 80023a8:	69ab      	ldr	r3, [r5, #24]
 80023aa:	4a93      	ldr	r2, [pc, #588]	; (80025f8 <main+0x6d8>)
 80023ac:	619a      	str	r2, [r3, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80023ae:	2320      	movs	r3, #32
 80023b0:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80023b4:	4991      	ldr	r1, [pc, #580]	; (80025fc <main+0x6dc>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80023b6:	696a      	ldr	r2, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80023b8:	f8c5 11b4 	str.w	r1, [r5, #436]	; 0x1b4
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80023bc:	f105 0378 	add.w	r3, r5, #120	; 0x78

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80023c0:	f505 7cba 	add.w	ip, r5, #372	; 0x174
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80023c4:	2002      	movs	r0, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80023c6:	498e      	ldr	r1, [pc, #568]	; (8002600 <main+0x6e0>)
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80023c8:	f885 0094 	strb.w	r0, [r5, #148]	; 0x94
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80023cc:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80023d0:	f8c5 11d4 	str.w	r1, [r5, #468]	; 0x1d4
 80023d4:	f8c5 61b8 	str.w	r6, [r5, #440]	; 0x1b8
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80023d8:	f8c5 b080 	str.w	fp, [r5, #128]	; 0x80
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80023dc:	f885 6095 	strb.w	r6, [r5, #149]	; 0x95
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80023e0:	f8c5 b0b4 	str.w	fp, [r5, #180]	; 0xb4
  tp->p_mtxlist = NULL;
 80023e4:	f8c5 60b0 	str.w	r6, [r5, #176]	; 0xb0
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80023e8:	f8c5 60ac 	str.w	r6, [r5, #172]	; 0xac
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80023ec:	f885 b096 	strb.w	fp, [r5, #150]	; 0x96
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80023f0:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
  REG_INSERT(tp);
 80023f4:	f8c5 5088 	str.w	r5, [r5, #136]	; 0x88

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80023f8:	f8c5 c084 	str.w	ip, [r5, #132]	; 0x84
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80023fc:	f105 019c 	add.w	r1, r5, #156	; 0x9c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002400:	6113      	str	r3, [r2, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002402:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002406:	4618      	mov	r0, r3
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002408:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800240c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 8002410:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002414:	616b      	str	r3, [r5, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002416:	f000 fa6b 	bl	80028f0 <chSchWakeupS.constprop.51>
 800241a:	f386 8811 	msr	BASEPRI, r6
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800241e:	4b79      	ldr	r3, [pc, #484]	; (8002604 <main+0x6e4>)
 8002420:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8002424:	2320      	movs	r3, #32
 8002426:	f383 8811 	msr	BASEPRI, r3
 */
void spi_lld_start(SPIDriver *spip) {
  uint32_t ds;

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 800242a:	f899 2000 	ldrb.w	r2, [r9]
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 800242e:	4b76      	ldr	r3, [pc, #472]	; (8002608 <main+0x6e8>)
 8002430:	f8c9 3004 	str.w	r3, [r9, #4]
 8002434:	455a      	cmp	r2, fp
 8002436:	4e75      	ldr	r6, [pc, #468]	; (800260c <main+0x6ec>)
 8002438:	f000 81b5 	beq.w	80027a6 <main+0x886>
 800243c:	f241 0007 	movw	r0, #4103	; 0x1007

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002440:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002444:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002448:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800244c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002450:	f8c9 1028 	str.w	r1, [r9, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002454:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8002458:	8959      	ldrh	r1, [r3, #10]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 800245a:	f8d9 201c 	ldr.w	r2, [r9, #28]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 800245e:	f041 0104 	orr.w	r1, r1, #4
 8002462:	b289      	uxth	r1, r1
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	6013      	str	r3, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8002468:	6011      	str	r1, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
 800246a:	6050      	str	r0, [r2, #4]
                    SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 800246c:	6811      	ldr	r1, [r2, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 800246e:	2002      	movs	r0, #2
 8002470:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002474:	6011      	str	r1, [r2, #0]
 8002476:	f889 0000 	strb.w	r0, [r9]
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	2220      	movs	r2, #32
 8002480:	f382 8811 	msr	BASEPRI, r2
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8002484:	f8d8 a030 	ldr.w	sl, [r8, #48]	; 0x30

  /* Make sure I2C peripheral is disabled */
  dp->CR1 &= ~I2C_CR1_PE;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8002488:	f898 b000 	ldrb.w	fp, [r8]
  i2cp->txdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_P2M;
#endif

  /* Make sure I2C peripheral is disabled */
  dp->CR1 &= ~I2C_CR1_PE;
 800248c:	f8da 2000 	ldr.w	r2, [sl]
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 8002490:	495f      	ldr	r1, [pc, #380]	; (8002610 <main+0x6f0>)
 8002492:	f8c8 1004 	str.w	r1, [r8, #4]
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

#if STM32_I2C_USE_DMA == TRUE
  /* Common DMA modes.*/
  i2cp->txdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_M2P;
 8002496:	219a      	movs	r1, #154	; 0x9a
 8002498:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
  i2cp->rxdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_P2M;
#endif

  /* Make sure I2C peripheral is disabled */
  dp->CR1 &= ~I2C_CR1_PE;
 800249c:	f022 0201 	bic.w	r2, r2, #1
  I2C_TypeDef *dp = i2cp->i2c;

#if STM32_I2C_USE_DMA == TRUE
  /* Common DMA modes.*/
  i2cp->txdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_P2M;
 80024a0:	218a      	movs	r1, #138	; 0x8a

  /* Make sure I2C peripheral is disabled */
  dp->CR1 &= ~I2C_CR1_PE;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80024a2:	f1bb 0f01 	cmp.w	fp, #1
  I2C_TypeDef *dp = i2cp->i2c;

#if STM32_I2C_USE_DMA == TRUE
  /* Common DMA modes.*/
  i2cp->txdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_P2M;
 80024a6:	f8c8 1020 	str.w	r1, [r8, #32]
 80024aa:	4e5a      	ldr	r6, [pc, #360]	; (8002614 <main+0x6f4>)
#endif

  /* Make sure I2C peripheral is disabled */
  dp->CR1 &= ~I2C_CR1_PE;
 80024ac:	f8ca 2000 	str.w	r2, [sl]

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80024b0:	f000 81cf 	beq.w	8002852 <main+0x932>
 80024b4:	4858      	ldr	r0, [pc, #352]	; (8002618 <main+0x6f8>)
 80024b6:	f24c 0390 	movw	r3, #49296	; 0xc090
#endif /* STM32_I2C_USE_I2C4 */
  }

#if STM32_I2C_USE_DMA == TRUE
  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->RXDR);
 80024ba:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->TXDR);
 80024be:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
#endif /* STM32_I2C_USE_I2C4 */
  }

#if STM32_I2C_USE_DMA == TRUE
  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->RXDR);
 80024c2:	684e      	ldr	r6, [r1, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->TXDR);
 80024c4:	6852      	ldr	r2, [r2, #4]
#endif /* STM32_I2C_USE_I2C4 */
  }

#if STM32_I2C_USE_DMA == TRUE
  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->RXDR);
 80024c6:	f10a 0e24 	add.w	lr, sl, #36	; 0x24
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->TXDR);
 80024ca:	f10a 0128 	add.w	r1, sl, #40	; 0x28
#endif /* STM32_I2C_USE_I2C4 */
  }

#if STM32_I2C_USE_DMA == TRUE
  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->RXDR);
 80024ce:	f8c6 e008 	str.w	lr, [r6, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->TXDR);
 80024d2:	6091      	str	r1, [r2, #8]
#endif

  /* Reset i2c peripheral, the TCIE bit will be handled separately.*/
  dp->CR1 = i2cp->config->cr1 |
 80024d4:	f8ca 3000 	str.w	r3, [sl]
            I2C_CR1_TXDMAEN | I2C_CR1_RXDMAEN | /* Enable only if using DMA */
#endif
            I2C_CR1_ERRIE | I2C_CR1_NACKIE;

  /* Setup I2C parameters.*/
  dp->TIMINGR = i2cp->config->timingr;
 80024d8:	f8ca 0010 	str.w	r0, [sl, #16]

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 80024dc:	f8da 3000 	ldr.w	r3, [sl]
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 80024e0:	f04f 0b02 	mov.w	fp, #2
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	f8ca 3000 	str.w	r3, [sl]
 80024ec:	2600      	movs	r6, #0
 80024ee:	f888 b000 	strb.w	fp, [r8]
 80024f2:	f386 8811 	msr	BASEPRI, r6
  0,
  0
};

static uint8_t writeByteSPI(uint8_t reg, uint8_t val){
	char txbuf[2] = {reg, val};
 80024f6:	22cf      	movs	r2, #207	; 0xcf
 80024f8:	2320      	movs	r3, #32
 80024fa:	f88d 200d 	strb.w	r2, [sp, #13]
 80024fe:	f88d 300c 	strb.w	r3, [sp, #12]
 8002502:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8002506:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800250a:	890a      	ldrh	r2, [r1, #8]
 800250c:	6849      	ldr	r1, [r1, #4]
 800250e:	f04f 0801 	mov.w	r8, #1
 8002512:	fa08 f202 	lsl.w	r2, r8, r2
 8002516:	b292      	uxth	r2, r2
 8002518:	834a      	strh	r2, [r1, #26]
 800251a:	f386 8811 	msr	BASEPRI, r6
 800251e:	f383 8811 	msr	BASEPRI, r3
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8002522:	f04f 0a03 	mov.w	sl, #3
 8002526:	aa04      	add	r2, sp, #16
 8002528:	a903      	add	r1, sp, #12
 800252a:	4658      	mov	r0, fp
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	f889 a000 	strb.w	sl, [r9]
 8002532:	f000 faa5 	bl	8002a80 <spi_lld_exchange.constprop.17>
 8002536:	69aa      	ldr	r2, [r5, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 8002538:	4938      	ldr	r1, [pc, #224]	; (800261c <main+0x6fc>)
 800253a:	6211      	str	r1, [r2, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800253c:	4650      	mov	r0, sl
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 800253e:	f8c9 2008 	str.w	r2, [r9, #8]
  tp->p_u.wttrp = trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002542:	f7fe fb6d 	bl	8000c20 <chSchGoSleepS>
 8002546:	f386 8811 	msr	BASEPRI, r6
 800254a:	9b01      	ldr	r3, [sp, #4]
 800254c:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8002550:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002554:	8913      	ldrh	r3, [r2, #8]
 8002556:	6852      	ldr	r2, [r2, #4]
 8002558:	fa08 f303 	lsl.w	r3, r8, r3
 800255c:	b29b      	uxth	r3, r3
 800255e:	8313      	strh	r3, [r2, #24]
 8002560:	f386 8811 	msr	BASEPRI, r6
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8002564:	4631      	mov	r1, r6

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002566:	4e2e      	ldr	r6, [pc, #184]	; (8002620 <main+0x700>)
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002568:	46de      	mov	lr, fp
      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800256a:	46d4      	mov	ip, sl
 800256c:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8002570:	f04f 0a0f 	mov.w	sl, #15
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8002574:	290c      	cmp	r1, #12
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
 8002576:	f101 0101 	add.w	r1, r1, #1

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800257a:	fa08 f301 	lsl.w	r3, r8, r1
 800257e:	9301      	str	r3, [sp, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002580:	ea4f 0241 	mov.w	r2, r1, lsl #1
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8002584:	f001 0307 	and.w	r3, r1, #7
 8002588:	ea4f 0383 	mov.w	r3, r3, lsl #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800258c:	fa0c f202 	lsl.w	r2, ip, r2
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8002590:	f04f 0002 	mov.w	r0, #2
 8002594:	fa00 f903 	lsl.w	r9, r0, r3
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 8002598:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    if (!mask)
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 800259c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80025a0:	ea6f 0202 	mvn.w	r2, r2
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80025a4:	fa0a f303 	lsl.w	r3, sl, r3
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80025a8:	d03e      	beq.n	8002628 <main+0x708>
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 80025aa:	f01b 0f01 	tst.w	fp, #1
 80025ae:	d0e1      	beq.n	8002574 <main+0x654>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80025b0:	6877      	ldr	r7, [r6, #4]
 80025b2:	9801      	ldr	r0, [sp, #4]
 80025b4:	ea27 0000 	bic.w	r0, r7, r0
 80025b8:	6070      	str	r0, [r6, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80025ba:	68b0      	ldr	r0, [r6, #8]
 80025bc:	4010      	ands	r0, r2
 80025be:	60b0      	str	r0, [r6, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80025c0:	68f0      	ldr	r0, [r6, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80025c2:	2907      	cmp	r1, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80025c4:	ea00 0002 	and.w	r0, r0, r2
 80025c8:	60f0      	str	r0, [r6, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80025ca:	f200 80e5 	bhi.w	8002798 <main+0x878>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80025ce:	6a30      	ldr	r0, [r6, #32]
 80025d0:	ea20 0303 	bic.w	r3, r0, r3
 80025d4:	ea43 0309 	orr.w	r3, r3, r9
 80025d8:	6233      	str	r3, [r6, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 80025da:	6833      	ldr	r3, [r6, #0]
 80025dc:	4013      	ands	r3, r2
 80025de:	ea43 030e 	orr.w	r3, r3, lr
 80025e2:	6033      	str	r3, [r6, #0]
 80025e4:	e7c6      	b.n	8002574 <main+0x654>
 80025e6:	bf00      	nop
 80025e8:	20000e47 	.word	0x20000e47
 80025ec:	2000a000 	.word	0x2000a000
 80025f0:	20000ad4 	.word	0x20000ad4
 80025f4:	08000331 	.word	0x08000331
 80025f8:	08002c90 	.word	0x08002c90
 80025fc:	080003e1 	.word	0x080003e1
 8002600:	080002c9 	.word	0x080002c9
 8002604:	08002cb8 	.word	0x08002cb8
 8002608:	08002c70 	.word	0x08002c70
 800260c:	20000e08 	.word	0x20000e08
 8002610:	08002c80 	.word	0x08002c80
 8002614:	20000b04 	.word	0x20000b04
 8002618:	00902025 	.word	0x00902025
 800261c:	20000e10 	.word	0x20000e10
 8002620:	48000c00 	.word	0x48000c00
 8002624:	20000ad8 	.word	0x20000ad8
 8002628:	f04f 0820 	mov.w	r8, #32
 800262c:	f388 8811 	msr	BASEPRI, r8

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002630:	4ba2      	ldr	r3, [pc, #648]	; (80028bc <main+0x99c>)
 8002632:	49a3      	ldr	r1, [pc, #652]	; (80028c0 <main+0x9a0>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002634:	696a      	ldr	r2, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002636:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
 800263a:	4ea2      	ldr	r6, [pc, #648]	; (80028c4 <main+0x9a4>)
 800263c:	f8c3 61ac 	str.w	r6, [r3, #428]	; 0x1ac
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002640:	2102      	movs	r1, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002642:	2600      	movs	r6, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002644:	7719      	strb	r1, [r3, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002646:	2001      	movs	r0, #1
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002648:	2141      	movs	r1, #65	; 0x41
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800264a:	7798      	strb	r0, [r3, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800264c:	615a      	str	r2, [r3, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800264e:	f503 70b6 	add.w	r0, r3, #364	; 0x16c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002652:	611d      	str	r5, [r3, #16]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002654:	f8c3 61b0 	str.w	r6, [r3, #432]	; 0x1b0
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002658:	775e      	strb	r6, [r3, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800265a:	639e      	str	r6, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800265c:	635e      	str	r6, [r3, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800265e:	619e      	str	r6, [r3, #24]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002660:	63d9      	str	r1, [r3, #60]	; 0x3c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002662:	f103 0724 	add.w	r7, r3, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002666:	6113      	str	r3, [r2, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002668:	f103 0228 	add.w	r2, r3, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800266c:	60d8      	str	r0, [r3, #12]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800266e:	6099      	str	r1, [r3, #8]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002670:	4618      	mov	r0, r3
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002672:	625f      	str	r7, [r3, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002678:	616b      	str	r3, [r5, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800267a:	f000 f939 	bl	80028f0 <chSchWakeupS.constprop.51>
 800267e:	f386 8811 	msr	BASEPRI, r6
 8002682:	f388 8811 	msr	BASEPRI, r8
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8002686:	4990      	ldr	r1, [pc, #576]	; (80028c8 <main+0x9a8>)
 */
void pwm_lld_start(PWMDriver *pwmp) {
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8002688:	7823      	ldrb	r3, [r4, #0]
  pwmp->period = config->period;
 800268a:	684d      	ldr	r5, [r1, #4]
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 800268c:	6061      	str	r1, [r4, #4]
 800268e:	2b01      	cmp	r3, #1
  pwmp->period = config->period;
 8002690:	60a5      	str	r5, [r4, #8]
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8002692:	4f8e      	ldr	r7, [pc, #568]	; (80028cc <main+0x9ac>)
 8002694:	f000 80bb 	beq.w	800280e <main+0x8ee>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6960      	ldr	r0, [r4, #20]
 800269c:	601e      	str	r6, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
#if STM32_TIM_MAX_CHANNELS > 4
    if (pwmp->channels > 4) {
 800269e:	7c3a      	ldrb	r2, [r7, #16]
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80026a0:	635e      	str	r6, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
#if STM32_TIM_MAX_CHANNELS > 4
    if (pwmp->channels > 4) {
 80026a2:	2a04      	cmp	r2, #4
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 80026a4:	f04f 0200 	mov.w	r2, #0
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80026a8:	639e      	str	r6, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 80026aa:	63de      	str	r6, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 80026ac:	641e      	str	r6, [r3, #64]	; 0x40
#if STM32_TIM_MAX_CHANNELS > 4
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
 80026ae:	bf84      	itt	hi
 80026b0:	659e      	strhi	r6, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
 80026b2:	65de      	strhi	r6, [r3, #92]	; 0x5c
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80026b6:	68ca      	ldr	r2, [r1, #12]
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80026b8:	680e      	ldr	r6, [r1, #0]
 80026ba:	fbb0 f0f6 	udiv	r0, r0, r6
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80026be:	f002 020f 	and.w	r2, r2, #15
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 80026c2:	6bce      	ldr	r6, [r1, #60]	; 0x3c
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 80026c4:	3d01      	subs	r5, #1
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80026c6:	3801      	subs	r0, #1
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80026c8:	2a01      	cmp	r2, #1
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 80026ca:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 80026cc:	62dd      	str	r5, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 80026ce:	605e      	str	r6, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80026d0:	d003      	beq.n	80026da <main+0x7ba>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 80026d2:	2a02      	cmp	r2, #2
 80026d4:	bf0c      	ite	eq
 80026d6:	2203      	moveq	r2, #3
 80026d8:	2200      	movne	r2, #0
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 80026da:	6948      	ldr	r0, [r1, #20]
 80026dc:	f000 000f 	and.w	r0, r0, #15
 80026e0:	2801      	cmp	r0, #1
 80026e2:	d003      	beq.n	80026ec <main+0x7cc>
 80026e4:	2802      	cmp	r0, #2
 80026e6:	d103      	bne.n	80026f0 <main+0x7d0>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 80026e8:	f042 0220 	orr.w	r2, r2, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 80026ec:	f042 0210 	orr.w	r2, r2, #16
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 80026f0:	69c8      	ldr	r0, [r1, #28]
 80026f2:	f000 000f 	and.w	r0, r0, #15
 80026f6:	2801      	cmp	r0, #1
 80026f8:	d003      	beq.n	8002702 <main+0x7e2>
 80026fa:	2802      	cmp	r0, #2
 80026fc:	d103      	bne.n	8002706 <main+0x7e6>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 8002702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8002706:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002708:	f000 000f 	and.w	r0, r0, #15
 800270c:	2801      	cmp	r0, #1
 800270e:	d003      	beq.n	8002718 <main+0x7f8>
 8002710:	2802      	cmp	r0, #2
 8002712:	d103      	bne.n	800271c <main+0x7fc>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 8002714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8002718:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800271c:	6c09      	ldr	r1, [r1, #64]	; 0x40
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 800271e:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002720:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8002724:	2200      	movs	r2, #0
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8002726:	2701      	movs	r7, #1
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8002728:	2585      	movs	r5, #133	; 0x85
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 800272a:	2002      	movs	r0, #2
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 800272c:	615f      	str	r7, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 800272e:	611a      	str	r2, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002730:	60d9      	str	r1, [r3, #12]
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8002732:	601d      	str	r5, [r3, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 8002734:	60e2      	str	r2, [r4, #12]
  pwmp->state = PWM_READY;
 8002736:	7020      	strb	r0, [r4, #0]
 8002738:	f382 8811 	msr	BASEPRI, r2
 800273c:	4d64      	ldr	r5, [pc, #400]	; (80028d0 <main+0x9b0>)
 800273e:	4e65      	ldr	r6, [pc, #404]	; (80028d4 <main+0x9b4>)
 8002740:	4690      	mov	r8, r2
 8002742:	f04f 0920 	mov.w	r9, #32
 8002746:	e00f      	b.n	8002768 <main+0x848>
    pwmStart(&PWMD4, &pwmcfg);

    while (TRUE) {
    	pwmEnableChannel(&PWMD4, 0, width);
    	if(width == 700) dir = UP;
		else if (width == 2000) dir = DOWN;
 8002748:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800274c:	d020      	beq.n	8002790 <main+0x870>
		if (dir == UP) width += step;
 800274e:	6832      	ldr	r2, [r6, #0]
 8002750:	b1da      	cbz	r2, 800278a <main+0x86a>
		else if (dir == DOWN) width -= step;
 8002752:	2a01      	cmp	r2, #1
 8002754:	d01d      	beq.n	8002792 <main+0x872>
 8002756:	f389 8811 	msr	BASEPRI, r9
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800275a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800275e:	2008      	movs	r0, #8
 8002760:	f7fe fa76 	bl	8000c50 <chSchGoSleepTimeoutS>
 8002764:	f388 8811 	msr	BASEPRI, r8
    chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO+1, Thread1, NULL);

    pwmStart(&PWMD4, &pwmcfg);

    while (TRUE) {
    	pwmEnableChannel(&PWMD4, 0, width);
 8002768:	6829      	ldr	r1, [r5, #0]
 800276a:	f389 8811 	msr	BASEPRI, r9

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 800276e:	68e3      	ldr	r3, [r4, #12]
  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
#else
  if (channel < 4)
    pwmp->tim->CCR[channel] = width;
 8002770:	69a2      	ldr	r2, [r4, #24]
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	60e3      	str	r3, [r4, #12]
 8002778:	6351      	str	r1, [r2, #52]	; 0x34
 800277a:	f388 8811 	msr	BASEPRI, r8
    	if(width == 700) dir = UP;
 800277e:	682b      	ldr	r3, [r5, #0]
 8002780:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002784:	d1e0      	bne.n	8002748 <main+0x828>
 8002786:	f8c6 8000 	str.w	r8, [r6]
		else if (width == 2000) dir = DOWN;
		if (dir == UP) width += step;
 800278a:	3332      	adds	r3, #50	; 0x32
 800278c:	602b      	str	r3, [r5, #0]
 800278e:	e7e2      	b.n	8002756 <main+0x836>
    pwmStart(&PWMD4, &pwmcfg);

    while (TRUE) {
    	pwmEnableChannel(&PWMD4, 0, width);
    	if(width == 700) dir = UP;
		else if (width == 2000) dir = DOWN;
 8002790:	6037      	str	r7, [r6, #0]
		if (dir == UP) width += step;
		else if (dir == DOWN) width -= step;
 8002792:	3b32      	subs	r3, #50	; 0x32
 8002794:	602b      	str	r3, [r5, #0]
 8002796:	e7de      	b.n	8002756 <main+0x836>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002798:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800279a:	ea20 0303 	bic.w	r3, r0, r3
 800279e:	ea43 0309 	orr.w	r3, r3, r9
 80027a2:	6273      	str	r3, [r6, #36]	; 0x24
 80027a4:	e719      	b.n	80025da <main+0x6ba>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 80027a6:	4632      	mov	r2, r6
 80027a8:	494b      	ldr	r1, [pc, #300]	; (80028d8 <main+0x9b8>)
 80027aa:	6a30      	ldr	r0, [r6, #32]
 80027ac:	f000 f910 	bl	80029d0 <dmaStreamAllocate.constprop.31>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 80027b0:	4632      	mov	r2, r6
 80027b2:	494a      	ldr	r1, [pc, #296]	; (80028dc <main+0x9bc>)
 80027b4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80027b6:	f000 f90b 	bl	80029d0 <dmaStreamAllocate.constprop.31>
 80027ba:	6873      	ldr	r3, [r6, #4]
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80027bc:	6a72      	ldr	r2, [r6, #36]	; 0x24
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 80027be:	f8da 0018 	ldr.w	r0, [sl, #24]
 80027c2:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80027c6:	6a31      	ldr	r1, [r6, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80027c8:	f8d2 c004 	ldr.w	ip, [r2, #4]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80027cc:	69f2      	ldr	r2, [r6, #28]
 80027ce:	6849      	ldr	r1, [r1, #4]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 80027d0:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80027d4:	f8ca 0018 	str.w	r0, [sl, #24]
 80027d8:	f44e 5080 	orr.w	r0, lr, #4096	; 0x1000
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
 80027dc:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80027e0:	320c      	adds	r2, #12
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
 80027e2:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80027e6:	608a      	str	r2, [r1, #8]
 80027e8:	f040 0007 	orr.w	r0, r0, #7
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80027ec:	f8cc 2008 	str.w	r2, [ip, #8]
  }

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
 80027f0:	f67f ae26 	bls.w	8002440 <main+0x520>
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80027f4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80027f6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80027f8:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80027fc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002800:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002804:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002808:	62b1      	str	r1, [r6, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800280a:	62f2      	str	r2, [r6, #44]	; 0x2c
 800280c:	e624      	b.n	8002458 <main+0x538>
    }
#endif

#if STM32_PWM_USE_TIM4
    if (&PWMD4 == pwmp) {
      rccEnableTIM4(FALSE);
 800280e:	4a34      	ldr	r2, [pc, #208]	; (80028e0 <main+0x9c0>)
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_PWM_TIM4_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM4CLK)
      pwmp->clock = STM32_TIM4CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8002810:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80028ec <main+0x9cc>
    }
#endif

#if STM32_PWM_USE_TIM4
    if (&PWMD4 == pwmp) {
      rccEnableTIM4(FALSE);
 8002814:	69d3      	ldr	r3, [r2, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002816:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 80028e8 <main+0x9c8>
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	61d3      	str	r3, [r2, #28]
      rccResetTIM4();
 8002820:	6910      	ldr	r0, [r2, #16]
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8002822:	69bb      	ldr	r3, [r7, #24]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_PWM_TIM4_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM4CLK)
      pwmp->clock = STM32_TIM4CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8002824:	f8c7 c014 	str.w	ip, [r7, #20]
#endif

#if STM32_PWM_USE_TIM4
    if (&PWMD4 == pwmp) {
      rccEnableTIM4(FALSE);
      rccResetTIM4();
 8002828:	f040 0704 	orr.w	r7, r0, #4
 800282c:	6117      	str	r7, [r2, #16]
 800282e:	6116      	str	r6, [r2, #16]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002830:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002834:	2270      	movs	r2, #112	; 0x70
 8002836:	f88e 231e 	strb.w	r2, [lr, #798]	; 0x31e
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800283a:	f8ce 6180 	str.w	r6, [lr, #384]	; 0x180
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800283e:	f646 0268 	movw	r2, #26728	; 0x6868
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002842:	f8ce 6000 	str.w	r6, [lr]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
                       STM32_TIM_CCMR2_OC4M(6) | STM32_TIM_CCMR2_OC4PE;
#if STM32_TIM_MAX_CHANNELS > 4
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
 8002846:	4e27      	ldr	r6, [pc, #156]	; (80028e4 <main+0x9c4>)
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8002848:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
                       STM32_TIM_CCMR2_OC4M(6) | STM32_TIM_CCMR2_OC4PE;
#if STM32_TIM_MAX_CHANNELS > 4
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
 800284a:	4660      	mov	r0, ip

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 800284c:	61da      	str	r2, [r3, #28]
                       STM32_TIM_CCMR2_OC4M(6) | STM32_TIM_CCMR2_OC4PE;
#if STM32_TIM_MAX_CHANNELS > 4
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
 800284e:	655e      	str	r6, [r3, #84]	; 0x54
 8002850:	e731      	b.n	80026b6 <main+0x796>
  if (i2cp->state == I2C_STOP) {

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {

      rccResetI2C1();
 8002852:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <main+0x9c0>)
      rccEnableI2C1(FALSE);
#if STM32_I2C_USE_DMA == TRUE
      {
        bool b;

        b = dmaStreamAllocate(i2cp->dmarx,
 8002854:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  if (i2cp->state == I2C_STOP) {

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {

      rccResetI2C1();
 8002856:	6911      	ldr	r1, [r2, #16]
 8002858:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800285c:	6111      	str	r1, [r2, #16]
 800285e:	6113      	str	r3, [r2, #16]
      rccEnableI2C1(FALSE);
 8002860:	69d1      	ldr	r1, [r2, #28]
 8002862:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8002866:	61d1      	str	r1, [r2, #28]
#if STM32_I2C_USE_DMA == TRUE
      {
        bool b;

        b = dmaStreamAllocate(i2cp->dmarx,
 8002868:	4619      	mov	r1, r3
 800286a:	4632      	mov	r2, r6
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	f000 f8af 	bl	80029d0 <dmaStreamAllocate.constprop.31>
                              STM32_I2C_I2C1_IRQ_PRIORITY,
                              NULL,
                              (void *)i2cp);
        osalDbgAssert(!b, "stream already allocated");
        b = dmaStreamAllocate(i2cp->dmatx,
 8002872:	9b01      	ldr	r3, [sp, #4]
 8002874:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002876:	4619      	mov	r1, r3
 8002878:	4632      	mov	r2, r6
 800287a:	f000 f8a9 	bl	80029d0 <dmaStreamAllocate.constprop.31>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <main+0x9c8>)
 8002880:	6870      	ldr	r0, [r6, #4]
 8002882:	21a0      	movs	r1, #160	; 0xa0
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002884:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002888:	f883 131f 	strb.w	r1, [r3, #799]	; 0x31f
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800288c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002890:	601a      	str	r2, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002892:	f883 1320 	strb.w	r1, [r3, #800]	; 0x320
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002896:	f8c3 b184 	str.w	fp, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800289a:	f8c3 b004 	str.w	fp, [r3, #4]
 800289e:	6843      	ldr	r3, [r0, #4]
                              (void *)i2cp);
        osalDbgAssert(!b, "stream already allocated");

        i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
                           STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
        i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80028a0:	6a71      	ldr	r1, [r6, #36]	; 0x24
                              STM32_I2C_I2C1_IRQ_PRIORITY,
                              NULL,
                              (void *)i2cp);
        osalDbgAssert(!b, "stream already allocated");

        i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80028a2:	6a32      	ldr	r2, [r6, #32]
 80028a4:	6800      	ldr	r0, [r0, #0]
 80028a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
                           STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
        i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80028ae:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80028b2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
                              STM32_I2C_I2C1_IRQ_PRIORITY,
                              NULL,
                              (void *)i2cp);
        osalDbgAssert(!b, "stream already allocated");

        i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80028b6:	6232      	str	r2, [r6, #32]
                           STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
        i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80028b8:	6271      	str	r1, [r6, #36]	; 0x24
 80028ba:	e5fe      	b.n	80024ba <main+0x59a>
 80028bc:	20000860 	.word	0x20000860
 80028c0:	080002c9 	.word	0x080002c9
 80028c4:	08001d71 	.word	0x08001d71
 80028c8:	20000800 	.word	0x20000800
 80028cc:	20000ab8 	.word	0x20000ab8
 80028d0:	20000844 	.word	0x20000844
 80028d4:	20000b00 	.word	0x20000b00
 80028d8:	08001a01 	.word	0x08001a01
 80028dc:	08001141 	.word	0x08001141
 80028e0:	40021000 	.word	0x40021000
 80028e4:	01016868 	.word	0x01016868
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	044aa200 	.word	0x044aa200

080028f0 <chSchWakeupS.constprop.51>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <chSchWakeupS.constprop.51+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80028f2:	b470      	push	{r4, r5, r6}
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80028f4:	2200      	movs	r2, #0
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80028f6:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80028f8:	699d      	ldr	r5, [r3, #24]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80028fa:	6202      	str	r2, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80028fc:	68a8      	ldr	r0, [r5, #8]
 80028fe:	68a1      	ldr	r1, [r4, #8]
 8002900:	4281      	cmp	r1, r0
 8002902:	d80b      	bhi.n	800291c <chSchWakeupS.constprop.51+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002904:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8002906:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	4291      	cmp	r1, r2
 800290c:	d9fb      	bls.n	8002906 <chSchWakeupS.constprop.51+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002912:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8002914:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8002916:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8002918:	bc70      	pop	{r4, r5, r6}
 800291a:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800291c:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800291e:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 8002920:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002922:	6891      	ldr	r1, [r2, #8]
 8002924:	4288      	cmp	r0, r1
 8002926:	d9fb      	bls.n	8002920 <chSchWakeupS.constprop.51+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002928:	6850      	ldr	r0, [r2, #4]
 800292a:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800292c:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800292e:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8002930:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8002932:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8002934:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8002936:	4629      	mov	r1, r5
 8002938:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800293a:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800293c:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800293e:	f7fd bcb7 	b.w	80002b0 <_port_switch>
 8002942:	bf00      	nop
 8002944:	20000c30 	.word	0x20000c30
	...

08002950 <chTMStartMeasurementX.constprop.48>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002950:	4b01      	ldr	r3, [pc, #4]	; (8002958 <chTMStartMeasurementX.constprop.48+0x8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8002954:	6083      	str	r3, [r0, #8]
 8002956:	4770      	bx	lr
 8002958:	e0001000 	.word	0xe0001000
 800295c:	00000000 	.word	0x00000000

08002960 <chEvtBroadcastFlagsI.constprop.43>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8002962:	4f17      	ldr	r7, [pc, #92]	; (80029c0 <chEvtBroadcastFlagsI.constprop.43+0x60>)
 8002964:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002968:	42bc      	cmp	r4, r7
 800296a:	d020      	beq.n	80029ae <chEvtBroadcastFlagsI.constprop.43+0x4e>
 800296c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800296e:	2600      	movs	r6, #0
 8002970:	e002      	b.n	8002978 <chEvtBroadcastFlagsI.constprop.43+0x18>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8002972:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002974:	42bc      	cmp	r4, r7
 8002976:	d01a      	beq.n	80029ae <chEvtBroadcastFlagsI.constprop.43+0x4e>
  /*lint -restore*/
    elp->el_flags |= flags;
 8002978:	68e3      	ldr	r3, [r4, #12]
 800297a:	432b      	orrs	r3, r5
 800297c:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800297e:	b115      	cbz	r5, 8002986 <chEvtBroadcastFlagsI.constprop.43+0x26>
 8002980:	6922      	ldr	r2, [r4, #16]
 8002982:	4213      	tst	r3, r2
 8002984:	d0f5      	beq.n	8002972 <chEvtBroadcastFlagsI.constprop.43+0x12>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8002986:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002988:	68a1      	ldr	r1, [r4, #8]
 800298a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800298c:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800298e:	430b      	orrs	r3, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002990:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002992:	6343      	str	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002994:	d00c      	beq.n	80029b0 <chEvtBroadcastFlagsI.constprop.43+0x50>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8002996:	2a0b      	cmp	r2, #11
 8002998:	d1eb      	bne.n	8002972 <chEvtBroadcastFlagsI.constprop.43+0x12>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800299a:	6a02      	ldr	r2, [r0, #32]

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800299c:	ea32 0303 	bics.w	r3, r2, r3
 80029a0:	d1e7      	bne.n	8002972 <chEvtBroadcastFlagsI.constprop.43+0x12>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80029a2:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 80029a4:	f7fe fb1c 	bl	8000fe0 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 80029a8:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80029aa:	42bc      	cmp	r4, r7
 80029ac:	d1e4      	bne.n	8002978 <chEvtBroadcastFlagsI.constprop.43+0x18>
 80029ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80029b0:	6a02      	ldr	r2, [r0, #32]
 80029b2:	4213      	tst	r3, r2
 80029b4:	d0dd      	beq.n	8002972 <chEvtBroadcastFlagsI.constprop.43+0x12>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80029b6:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 80029b8:	f7fe fb12 	bl	8000fe0 <chSchReadyI>
 80029bc:	e7f4      	b.n	80029a8 <chEvtBroadcastFlagsI.constprop.43+0x48>
 80029be:	bf00      	nop
 80029c0:	20000bb0 	.word	0x20000bb0
	...

080029d0 <dmaStreamAllocate.constprop.31>:
 * @retval false        no error, stream taken.
 * @retval true         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 80029d2:	4e27      	ldr	r6, [pc, #156]	; (8002a70 <dmaStreamAllocate.constprop.31+0xa0>)
 80029d4:	7c45      	ldrb	r5, [r0, #17]
 80029d6:	6833      	ldr	r3, [r6, #0]
 80029d8:	2401      	movs	r4, #1
 80029da:	fa04 f705 	lsl.w	r7, r4, r5
 80029de:	421f      	tst	r7, r3
 80029e0:	d144      	bne.n	8002a6c <dmaStreamAllocate.constprop.31+0x9c>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80029e2:	4c24      	ldr	r4, [pc, #144]	; (8002a74 <dmaStreamAllocate.constprop.31+0xa4>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 80029e4:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80029e8:	f844 1035 	str.w	r1, [r4, r5, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 80029ec:	607a      	str	r2, [r7, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80029ee:	065a      	lsls	r2, r3, #25
 80029f0:	d104      	bne.n	80029fc <dmaStreamAllocate.constprop.31+0x2c>
    rccEnableDMA1(false);
 80029f2:	4c21      	ldr	r4, [pc, #132]	; (8002a78 <dmaStreamAllocate.constprop.31+0xa8>)
 80029f4:	6962      	ldr	r2, [r4, #20]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	6162      	str	r2, [r4, #20]
  }
#if STM32_DMA2_NUM_CHANNELS > 0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 80029fc:	f413 6f78 	tst.w	r3, #3968	; 0xf80
 8002a00:	d104      	bne.n	8002a0c <dmaStreamAllocate.constprop.31+0x3c>
    rccEnableDMA2(false);
 8002a02:	4c1d      	ldr	r4, [pc, #116]	; (8002a78 <dmaStreamAllocate.constprop.31+0xa8>)
 8002a04:	6962      	ldr	r2, [r4, #20]
 8002a06:	f042 0202 	orr.w	r2, r2, #2
 8002a0a:	6162      	str	r2, [r4, #20]
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002a0c:	6842      	ldr	r2, [r0, #4]
 8002a0e:	6807      	ldr	r7, [r0, #0]
 8002a10:	6814      	ldr	r4, [r2, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8002a12:	6885      	ldr	r5, [r0, #8]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002a14:	f024 040f 	bic.w	r4, r4, #15
 8002a18:	6014      	str	r4, [r2, #0]
 8002a1a:	f890 e010 	ldrb.w	lr, [r0, #16]
 8002a1e:	240e      	movs	r4, #14
 8002a20:	fa04 f40e 	lsl.w	r4, r4, lr
 8002a24:	607c      	str	r4, [r7, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8002a26:	422b      	tst	r3, r5
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8002a28:	f04f 0400 	mov.w	r4, #0
 8002a2c:	6014      	str	r4, [r2, #0]

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8002a2e:	d116      	bne.n	8002a5e <dmaStreamAllocate.constprop.31+0x8e>
 8002a30:	b1a9      	cbz	r1, 8002a5e <dmaStreamAllocate.constprop.31+0x8e>
      (func != NULL)) {
    nvicEnableVector(dmastp->vector, priority);
 8002a32:	7c81      	ldrb	r1, [r0, #18]
 8002a34:	094a      	lsrs	r2, r1, #5
 8002a36:	0092      	lsls	r2, r2, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002a38:	f101 4560 	add.w	r5, r1, #3758096384	; 0xe0000000
 8002a3c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8002a40:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8002a44:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002a48:	f001 011f 	and.w	r1, r1, #31
 8002a4c:	2401      	movs	r4, #1
 8002a4e:	fa04 f101 	lsl.w	r1, r4, r1

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002a52:	27a0      	movs	r7, #160	; 0xa0
 8002a54:	f885 7300 	strb.w	r7, [r5, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002a58:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002a5c:	6011      	str	r1, [r2, #0]
  }

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);
 8002a5e:	7c41      	ldrb	r1, [r0, #17]
 8002a60:	2201      	movs	r2, #1
 8002a62:	408a      	lsls	r2, r1
 8002a64:	4313      	orrs	r3, r2
 8002a66:	6033      	str	r3, [r6, #0]

  return false;
 8002a68:	2000      	movs	r0, #0
 8002a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;
 8002a6c:	4620      	mov	r0, r4

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);

  return false;
}
 8002a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a70:	20000e38 	.word	0x20000e38
 8002a74:	20000b50 	.word	0x20000b50
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	00000000 	.word	0x00000000

08002a80 <spi_lld_exchange.constprop.17>:
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <spi_lld_exchange.constprop.17+0x38>)
 * @param[in] txbuf     the pointer to the transmit buffer
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
 8002a82:	b4f0      	push	{r4, r5, r6, r7}
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002a84:	6a1c      	ldr	r4, [r3, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002a86:	6a5f      	ldr	r7, [r3, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002a88:	6a9e      	ldr	r6, [r3, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002a8a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002a8c:	6864      	ldr	r4, [r4, #4]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002a90:	60e2      	str	r2, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002a92:	f046 0680 	orr.w	r6, r6, #128	; 0x80

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002a96:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002a9a:	6060      	str	r0, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002a9c:	6026      	str	r6, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002a9e:	60d9      	str	r1, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002aa0:	6058      	str	r0, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002aa2:	601d      	str	r5, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8002aa4:	6822      	ldr	r2, [r4, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	bcf0      	pop	{r4, r5, r6, r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	20000e08 	.word	0x20000e08
 8002abc:	00000000 	.word	0x00000000

08002ac0 <usb_lld_start_in.constprop.10>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002ac0:	68c3      	ldr	r3, [r0, #12]
 8002ac2:	6958      	ldr	r0, [r3, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8002ac4:	8a1b      	ldrh	r3, [r3, #16]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 8002ac6:	6802      	ldr	r2, [r0, #0]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8002ac8:	6881      	ldr	r1, [r0, #8]
 8002aca:	429a      	cmp	r2, r3
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8002acc:	b410      	push	{r4}
 8002ace:	bf28      	it	cs
 8002ad0:	461a      	movcs	r2, r3
 * @notapi
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002ad2:	4c16      	ldr	r4, [pc, #88]	; (8002b2c <usb_lld_start_in.constprop.10+0x6c>)
  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8002ad4:	60c2      	str	r2, [r0, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002ad6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002ad8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002adc:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002ae0:	6803      	ldr	r3, [r0, #0]
  if (EPR_EP_TYPE_IS_ISO(epr) && (epr & EPR_DTOG_TX))
    udp->TXCOUNT1 = (stm32_usb_pma_t)n;
  else
    udp->TXCOUNT0 = (stm32_usb_pma_t)n;
#else
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8002ae2:	6042      	str	r2, [r0, #4]
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
 8002ae4:	b18a      	cbz	r2, 8002b0a <usb_lld_start_in.constprop.10+0x4a>
 8002ae6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002aea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	3a01      	subs	r2, #1
 8002af2:	0852      	lsrs	r2, r2, #1
 8002af4:	3304      	adds	r3, #4
 8002af6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002afa:	e000      	b.n	8002afe <usb_lld_start_in.constprop.10+0x3e>
 8002afc:	3304      	adds	r3, #4
    uint32_t w;

    w  = *buf++;
    w |= *buf++ << 8;
 8002afe:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pmap++ = (stm32_usb_pma_t)w;
 8002b02:	f843 0c04 	str.w	r0, [r3, #-4]
    buf += 16;
    pmap += 8;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d1f8      	bne.n	8002afc <usb_lld_start_in.constprop.10+0x3c>
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
  usb_packet_write_from_buffer(ep, isp->txbuf, n);

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <usb_lld_start_in.constprop.10+0x6c>)
}
 8002b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
  usb_packet_write_from_buffer(ep, isp->txbuf, n);

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b1a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b26:	6013      	str	r3, [r2, #0]
}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40005c00 	.word	0x40005c00

08002b30 <usb_lld_start_out.constprop.9>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8002b30:	68c1      	ldr	r1, [r0, #12]
 8002b32:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8002b34:	6813      	ldr	r3, [r2, #0]
 8002b36:	b19b      	cbz	r3, 8002b60 <usb_lld_start_out.constprop.9+0x30>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8002b38:	8a49      	ldrh	r1, [r1, #18]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b42:	8193      	strh	r3, [r2, #12]
                             usbp->epc[ep]->out_maxsize);

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8002b44:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <usb_lld_start_out.constprop.9+0x38>)
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b50:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4770      	bx	lr
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	8193      	strh	r3, [r2, #12]
 8002b64:	e7ee      	b.n	8002b44 <usb_lld_start_out.constprop.9+0x14>
 8002b66:	bf00      	nop
 8002b68:	40005c00 	.word	0x40005c00
 8002b6c:	00000000 	.word	0x00000000
 8002b70:	ffffffe7 	.word	0xffffffe7
 8002b74:	ffffffff 	.word	0xffffffff
	...

08002b80 <zero_status>:
	...

08002b90 <active_status>:
	...

08002ba0 <ram_areas>:
 8002ba0:	08002e18 20000e3c 20000e3c 20000e3c     ....<.. <.. <.. 
 8002bb0:	08002e18 00000000 00000000 00000000     ................
 8002bc0:	08002e18 00000000 00000000 00000000     ................
 8002bd0:	08002e18 00000000 00000000 00000000     ................
 8002be0:	08002e18 10000000 10000000 10000000     ................
 8002bf0:	08002e18 00000000 00000000 00000000     ................
 8002c00:	08002e18 00000000 00000000 00000000     ................
 8002c10:	08002e18 00000000 00000000 00000000     ................

08002c20 <halted_status>:
 8002c20:	00000001 00000000 00000000 00000000     ................
 8002c30:	20414d44 6c696166 00657275 00000000     DMA failure.....

08002c40 <ep0config>:
 8002c40:	00000000 08000591 080004a1 080003f1     ................
 8002c50:	00400040 20000848 20000848 00000001     @.@.H.. H.. ....
 8002c60:	20000858 00000000 00000000 00000000     X.. ............

08002c70 <spi1cfg>:
 8002c70:	00000000 48001000 001b0003 00000000     .......H........

08002c80 <i2cconfig>:
 8002c80:	00902025 00000000 00000000 00000000     % ..............

08002c90 <ch_debug>:
 8002c90:	6e69616d 18451600 08440404 1814100c     main..E...D.....
 8002ca0:	1e1d1c00 00000000 00000000 00000000     ................
 8002cb0:	65726854 00316461 656c6469 00000000     Thread1.idle....

08002cc0 <vmt>:
 8002cc0:	08000e41 08000f61 08000ec1 08000fd1     A...a...........
 8002cd0:	08000eb1 08000fc1 08000e31 08000f51     ........1...Q...

08002ce0 <_stm32_dma_streams>:
 8002ce0:	40020000 40020008 00000001 00000000     ...@...@........
 8002cf0:	000b0000 40020000 4002001c 00000002     .......@...@....
 8002d00:	00000000 000c0104 40020000 40020030     ...........@0..@
 8002d10:	00000004 00000000 000d0208 40020000     ...............@
 8002d20:	40020044 00000008 00000000 000e030c     D..@............
 8002d30:	40020000 40020058 00000010 00000000     ...@X..@........
 8002d40:	000f0410 40020000 4002006c 00000020     .......@l..@ ...
 8002d50:	00000000 00100514 40020000 40020080     ...........@...@
 8002d60:	00000040 00000000 00110618 40020400     @..............@
 8002d70:	40020408 00000080 00000000 00380700     ...@..........8.
 8002d80:	40020400 4002041c 00000100 00000000     ...@...@........
 8002d90:	00390804 40020400 40020430 00000200     ..9....@0..@....
 8002da0:	00000000 003a0908 40020400 40020444     ......:....@D..@
 8002db0:	00000400 00000000 003b0a0c 40020400     ..........;....@
 8002dc0:	40020458 00000800 00000000 003c0b10     X..@..........<.
